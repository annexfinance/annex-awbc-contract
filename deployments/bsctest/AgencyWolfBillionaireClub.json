{
  "address": "0x70Cc3a8FD70C5925a92FE1932616b6c89C78C698",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_initNotRevealedUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_paymentsToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressMintedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getStakedTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "gift",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftPerAddressLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notRevealedUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ownerMintedCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "publicsaleValidations",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseExtension",
          "type": "string"
        }
      ],
      "name": "setBaseExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCost",
          "type": "uint256"
        }
      ],
      "name": "setCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "setNftPerAddressLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_notRevealedURI",
          "type": "string"
        }
      ],
      "name": "setNotRevealedURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_publicSaleDate",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleDate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setStakingAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newmaxMintAmount",
          "type": "uint256"
        }
      ],
      "name": "setmaxMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakeTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedInTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isStake",
          "type": "bool"
        }
      ],
      "name": "updateStakeTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "whitelistUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x451557dd0de93ddd2ebb66dfc9518d006fd1b3f0894278021447cb891fa58868",
  "receipt": {
    "to": null,
    "from": "0x79395B873119a42c3B9E4211FCEA9CC0358769Ed",
    "contractAddress": "0x70Cc3a8FD70C5925a92FE1932616b6c89C78C698",
    "transactionIndex": 3,
    "gasUsed": "3254329",
    "logsBloom": "0x
    "blockHash": "0xbd2f43f5e4437bc748a60853745ba8e03443026d7cff1c1939e8fa3dc758b4c4",
    "transactionHash": "0x451557dd0de93ddd2ebb66dfc9518d006fd1b3f0894278021447cb891fa58868",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 17507312,
        "transactionHash": "0x451557dd0de93ddd2ebb66dfc9518d006fd1b3f0894278021447cb891fa58868",
        "address": "0x70Cc3a8FD70C5925a92FE1932616b6c89C78C698",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000079395b873119a42c3b9e4211fcea9cc0358769ed"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xbd2f43f5e4437bc748a60853745ba8e03443026d7cff1c1939e8fa3dc758b4c4"
      }
    ],
    "blockNumber": 17507312,
    "cumulativeGasUsed": "3596982",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "AgencyWolfBillionaireClub",
    "AWBC",
    "https://nftassets.annex.finance/ipfs/QmeHoeon52U4HYuemkfuKtzxcSZV2xSW69rBeEKKPzav4G",
    "0xb75f3F9D35d256a94BBd7A3fC2E16c768E17930E"
  ],
  "solcInputHash": "98eb19465cbc9940d30b9f32d955b606",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initNotRevealedUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_paymentsToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressMintedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStakedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"gift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftPerAddressLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notRevealedUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ownerMintedCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"publicsaleValidations\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseExtension\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setNftPerAddressLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_notRevealedURI\",\"type\":\"string\"}],\"name\":\"setNotRevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicSaleDate\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newmaxMintAmount\",\"type\":\"uint256\"}],\"name\":\"setmaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedInTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStake\",\"type\":\"bool\"}],\"name\":\"updateStakeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"whitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AWBC.sol\":\"AgencyWolfBillionaireClub\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AWBC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract AgencyWolfBillionaireClub is ERC721Enumerable, Ownable {\\n\\tusing Strings for uint256;\\n\\tstring private baseURI;\\n\\tstring public baseExtension = \\\".json\\\";\\n\\tstring public notRevealedUri;\\n\\tuint256 public cost = 100000 ether;\\n\\tuint256 public maxSupply = 10000;\\n\\tuint256 public maxMintAmount = 20;\\n\\tuint256 public nftPerAddressLimit = 100;\\n\\tuint256 public publicSaleDate = 1635814800;\\n\\taddress public stakingAddress;\\n\\tbool public paused = false;\\n\\tbool public revealed = false;\\n\\tmapping(address => bool) whitelistedAddresses;\\n\\tmapping(address => uint256) public addressMintedBalance;\\n\\tmapping(uint256 => uint256) public stakedInTime;\\n\\tmapping(uint256 => uint256) public stakeTime;\\n\\n\\t// Contracts\\n\\tIERC20 public paymentsToken;\\n\\n\\tconstructor(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tstring memory _initNotRevealedUri,\\n\\t\\taddress _paymentsToken\\n\\t) ERC721(_name, _symbol) {\\n\\t\\tpaymentsToken = IERC20(_paymentsToken);\\n\\t\\tsetNotRevealedURI(_initNotRevealedUri);\\n\\t}\\n\\n\\t//MODIFIERS\\n\\tmodifier notPaused() {\\n\\t\\trequire(!paused, \\\"the contract is paused\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier saleStarted() {\\n\\t\\trequire(block.timestamp >= publicSaleDate, \\\"Sale has not started yet\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier minimumMintAmount(uint256 _mintAmount) {\\n\\t\\trequire(_mintAmount > 0, \\\"need to mint at least 1 NFT\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t// INTERNAL\\n\\tfunction _baseURI() internal view virtual override returns (string memory) {\\n\\t\\treturn baseURI;\\n\\t}\\n\\n\\tfunction publicsaleValidations(uint256 _ownerMintedCount, uint256 _mintAmount) public view {\\n\\t\\trequire(_ownerMintedCount + _mintAmount <= nftPerAddressLimit, \\\"max NFT per address exceeded\\\");\\n\\t\\trequire(_mintAmount <= maxMintAmount, \\\"max mint amount per transaction exceeded\\\");\\n\\t}\\n\\n\\t//MINT\\n\\tfunction mint(uint256 _mintAmount) external notPaused saleStarted minimumMintAmount(_mintAmount) {\\n\\t\\tuint256 supply = totalSupply();\\n\\t\\tuint256 ownerMintedCount = addressMintedBalance[msg.sender];\\n\\n\\t\\t//Do some validations depending on which step of the sale we are in\\n\\t\\tpublicsaleValidations(ownerMintedCount, _mintAmount);\\n\\n\\t\\trequire(supply + _mintAmount <= maxSupply, \\\"max NFT limit exceeded\\\");\\n\\n\\t\\tpaymentsToken.transferFrom(msg.sender, address(this), cost * _mintAmount);\\n\\n\\t\\tfor (uint256 i = 1; i <= _mintAmount; i++) {\\n\\t\\t\\taddressMintedBalance[msg.sender]++;\\n\\t\\t\\t_safeMint(msg.sender, supply + i);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction gift(uint256 _mintAmount, address destination) external onlyOwner {\\n\\t\\trequire(_mintAmount > 0, \\\"need to mint at least 1 NFT\\\");\\n\\t\\tuint256 supply = totalSupply();\\n\\t\\trequire(supply + _mintAmount <= maxSupply, \\\"max NFT limit exceeded\\\");\\n\\n\\t\\tfor (uint256 i = 1; i <= _mintAmount; i++) {\\n\\t\\t\\taddressMintedBalance[destination]++;\\n\\t\\t\\t_safeMint(destination, supply + i);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction updateStakeTime(uint256 tokenId, bool isStake) external {\\n\\t\\trequire(msg.sender == stakingAddress, \\\"\\\");\\n\\n\\t\\tif (isStake) {\\n\\t\\t\\tstakeTime[tokenId] = block.timestamp;\\n\\t\\t} else {\\n\\t\\t\\tstakedInTime[tokenId] = stakedInTime[tokenId] + block.timestamp - stakeTime[tokenId];\\n            stakeTime[tokenId] = 0;\\n\\t\\t}\\n\\t}\\n\\n    function getStakedTime(uint256 tokenId) external view returns (uint) {\\n        uint stakedTime = stakedInTime[tokenId];\\n\\t\\tif (stakeTime[tokenId] > 0) {\\n\\t\\t\\tstakedTime = stakedInTime[tokenId] + block.timestamp - stakeTime[tokenId];\\n\\t\\t}\\n\\n        return stakedTime;\\n\\t}\\n\\n\\t//PUBLIC VIEWS\\n\\tfunction isWhitelisted(address _user) public view returns (bool) {\\n\\t\\treturn whitelistedAddresses[_user];\\n\\t}\\n\\n\\tfunction walletOfOwner(address _owner) public view returns (uint256[] memory) {\\n\\t\\tuint256 ownerTokenCount = balanceOf(_owner);\\n\\t\\tuint256[] memory tokenIds = new uint256[](ownerTokenCount);\\n\\t\\tfor (uint256 i; i < ownerTokenCount; i++) {\\n\\t\\t\\ttokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\n\\t\\t}\\n\\t\\treturn tokenIds;\\n\\t}\\n\\n\\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n\\t\\trequire(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n\\t\\tif (!revealed) {\\n\\t\\t\\treturn notRevealedUri;\\n\\t\\t} else {\\n\\t\\t\\tstring memory currentBaseURI = _baseURI();\\n\\t\\t\\treturn\\n\\t\\t\\t\\tbytes(currentBaseURI).length > 0\\n\\t\\t\\t\\t\\t? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))\\n\\t\\t\\t\\t\\t: \\\"\\\";\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getCurrentCost() public view returns (uint256) {\\n\\t\\treturn cost;\\n\\t}\\n\\n\\t//ONLY OWNER VIEWS\\n\\tfunction getBaseURI() public view onlyOwner returns (string memory) {\\n\\t\\treturn baseURI;\\n\\t}\\n\\n\\tfunction getContractBalance() public view onlyOwner returns (uint256) {\\n\\t\\treturn address(this).balance;\\n\\t}\\n\\n\\t//ONLY OWNER SETTERS\\n\\tfunction reveal() public onlyOwner {\\n\\t\\trevealed = true;\\n\\t}\\n\\n\\tfunction pause(bool _state) public onlyOwner {\\n\\t\\tpaused = _state;\\n\\t}\\n\\n\\tfunction setNftPerAddressLimit(uint256 _limit) public onlyOwner {\\n\\t\\tnftPerAddressLimit = _limit;\\n\\t}\\n\\n\\tfunction setCost(uint256 _newCost) public onlyOwner {\\n\\t\\tcost = _newCost;\\n\\t}\\n\\n\\tfunction setStakingAddress(address _address) public onlyOwner {\\n\\t\\tstakingAddress = _address;\\n\\t}\\n\\n\\tfunction setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {\\n\\t\\tmaxMintAmount = _newmaxMintAmount;\\n\\t}\\n\\n\\tfunction setBaseURI(string memory _newBaseURI) public onlyOwner {\\n\\t\\tbaseURI = _newBaseURI;\\n\\t}\\n\\n\\tfunction setBaseExtension(string memory _newBaseExtension) public onlyOwner {\\n\\t\\tbaseExtension = _newBaseExtension;\\n\\t}\\n\\n\\tfunction setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {\\n\\t\\tnotRevealedUri = _notRevealedURI;\\n\\t}\\n\\n\\tfunction setMaxSupply(uint256 _maxSupply) public onlyOwner {\\n\\t\\tmaxSupply = _maxSupply;\\n\\t}\\n\\n\\tfunction setPublicSaleDate(uint256 _publicSaleDate) public onlyOwner {\\n\\t\\tpublicSaleDate = _publicSaleDate;\\n\\t}\\n\\n\\tfunction whitelistUsers(address[] memory addresses) public onlyOwner {\\n\\t\\tfor (uint256 i = 0; i < addresses.length; i++) {\\n\\t\\t\\twhitelistedAddresses[addresses[i]] = true;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction withdraw() public payable onlyOwner {\\n\\t\\tuint256 balance = paymentsToken.balanceOf(address(this));\\n\\t\\trequire(balance > 0);\\n\\t\\tpaymentsToken.transfer(msg.sender, balance);\\n\\t}\\n}\\n\",\"keccak256\":\"0x7d741fa4d35d228a03aa5f6ac589db918a07a22f96ec917e42bf13424fea3a88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526005608081905264173539b7b760d91b60a09081526200002891600c9190620001ae565b5069152d02c7e14af6800000600e55612710600f55601460105560646011556361808d906012556013805461ffff60a01b191690553480156200006a57600080fd5b5060405162003956380380620039568339810160408190526200008d91620002e0565b835184908490620000a6906000906020850190620001ae565b508051620000bc906001906020840190620001ae565b505050620000d9620000d36200010960201b60201c565b6200010d565b601880546001600160a01b0319166001600160a01b038316179055620000ff826200015f565b5050505062000513565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600a546001600160a01b03163314620001955760405162461bcd60e51b81526004016200018c90620003a1565b60405180910390fd5b8051620001aa90600d906020840190620001ae565b5050565b828054620001bc906200046d565b90600052602060002090601f016020900481019282620001e057600085556200022b565b82601f10620001fb57805160ff19168380011785556200022b565b828001600101855582156200022b579182015b828111156200022b5782518255916020019190600101906200020e565b50620002399291506200023d565b5090565b5b808211156200023957600081556001016200023e565b60006200026b6200026584620003fb565b620003dc565b905082815260208101848484011115620002885762000288600080fd5b620002958482856200043a565b509392505050565b8051620002aa81620004f9565b92915050565b600082601f830112620002c657620002c6600080fd5b8151620002d884826020860162000254565b949350505050565b60008060008060808587031215620002fb57620002fb600080fd5b84516001600160401b03811115620003165762000316600080fd5b6200032487828801620002b0565b94505060208501516001600160401b03811115620003455762000345600080fd5b6200035387828801620002b0565b93505060408501516001600160401b03811115620003745762000374600080fd5b6200038287828801620002b0565b925050606062000395878288016200029d565b91505092959194509250565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604083015260608201620002aa565b6000620003e860405190565b9050620003f682826200049e565b919050565b60006001600160401b03821115620004175762000417620004e3565b601f19601f83011660200192915050565b60006001600160a01b038216620002aa565b60005b83811015620004575781810151838201526020016200043d565b8381111562000467576000848401525b50505050565b6002810460018216806200048257607f821691505b60208210811415620004985762000498620004cd565b50919050565b601f19601f83011681018181106001600160401b0382111715620004c657620004c6620004e3565b6040525050565b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b620005048162000428565b81146200051057600080fd5b50565b61343380620005236000396000f3fe60806040526004361061036b5760003560e01c806370a08231116101c6578063ba7d2c76116100f7578063da3ef23f11610095578063edec5f271161006f578063edec5f27146109fa578063f2c4ce1e14610a1a578063f2fde38b14610a3a578063f4e0d9ac14610a5a57600080fd5b8063da3ef23f1461097b578063e985e9c51461099b578063eced3873146109e457600080fd5b8063cfa92d94116100d1578063cfa92d94146108f8578063d0eb26b014610925578063d5abeb0114610945578063d7b4be241461095b57600080fd5b8063ba7d2c76146108ad578063c6682862146108c3578063c87b56dd146108d857600080fd5b806395d89b4111610164578063a22cb4651161013e578063a22cb4651461082b578063a475b5dd1461084b578063ae1f5a9414610860578063b88d4fde1461088d57600080fd5b806395d89b41146107d65780639b6b3f6b146107eb578063a0712d681461080b57600080fd5b80637f00c7a6116101a05780637f00c7a614610763578063831e60de1461078357806383a076be146107985780638da5cb5b146107b857600080fd5b806370a0823114610719578063714c539814610739578063715018a61461074e57600080fd5b80633af32abf116102a057806353e4c0b81161023e5780635c975abb116102185780635c975abb146106a35780636352211e146106c45780636f8b44b0146106e45780636f9fb98a1461070457600080fd5b806353e4c0b81461064357806355f804b3146106635780635b0d65d81461068357600080fd5b8063438b63001161027a578063438b6300146105b557806344a0d68a146105e25780634f6ccce714610602578063518302271461062257600080fd5b80633af32abf146105545780633ccfd60b1461058d57806342842e0e1461059557600080fd5b80630e54a8831161030d57806318cae269116102e757806318cae269146104d1578063239c70ae146104fe57806323b872dd146105145780632f745c591461053457600080fd5b80630e54a8831461048657806313faede6146104a657806318160ddd146104bc57600080fd5b8063081812fc11610349578063081812fc146103ea578063081c8c4414610417578063095ea7b31461042c5780630a42f0491461044c57600080fd5b806301ffc9a71461037057806302329a29146103a657806306fdde03146103c8575b600080fd5b34801561037c57600080fd5b5061039061038b36600461268b565b610a7a565b60405161039d9190612fcc565b60405180910390f35b3480156103b257600080fd5b506103c66103c1366004612649565b610aa5565b005b3480156103d457600080fd5b506103dd610af6565b60405161039d9190612fe8565b3480156103f657600080fd5b5061040a610405366004612708565b610b88565b60405161039d9190612f26565b34801561042357600080fd5b506103dd610bd8565b34801561043857600080fd5b506103c66104473660046125db565b610c66565b34801561045857600080fd5b50610479610467366004612708565b60176020526000908152604090205481565b60405161039d919061318e565b34801561049257600080fd5b506103c66104a1366004612708565b610cec565b3480156104b257600080fd5b50610479600e5481565b3480156104c857600080fd5b50600854610479565b3480156104dd57600080fd5b506104796104ec36600461247b565b60156020526000908152604090205481565b34801561050a57600080fd5b5061047960105481565b34801561052057600080fd5b506103c661052f3660046124d9565b610d1b565b34801561054057600080fd5b5061047961054f3660046125db565b610d4c565b34801561056057600080fd5b5061039061056f36600461247b565b6001600160a01b031660009081526014602052604090205460ff1690565b6103c6610d9e565b3480156105a157600080fd5b506103c66105b03660046124d9565b610ee0565b3480156105c157600080fd5b506105d56105d036600461247b565b610efb565b60405161039d9190612fbb565b3480156105ee57600080fd5b506103c66105fd366004612708565b610f9d565b34801561060e57600080fd5b5061047961061d366004612708565b610fcc565b34801561062e57600080fd5b5060135461039090600160a81b900460ff1681565b34801561064f57600080fd5b506103c661065e36600461276c565b61101a565b34801561066f57600080fd5b506103c661067e3660046126cd565b6110af565b34801561068f57600080fd5b506103c661069e36600461278e565b6110ec565b3480156106af57600080fd5b5060135461039090600160a01b900460ff1681565b3480156106d057600080fd5b5061040a6106df366004612708565b611139565b3480156106f057600080fd5b506103c66106ff366004612708565b61116e565b34801561071057600080fd5b5061047961119d565b34801561072557600080fd5b5061047961073436600461247b565b6111cf565b34801561074557600080fd5b506103dd611213565b34801561075a57600080fd5b506103c661124d565b34801561076f57600080fd5b506103c661077e366004612708565b611283565b34801561078f57600080fd5b50600e54610479565b3480156107a457600080fd5b506103c66107b336600461274a565b6112b2565b3480156107c457600080fd5b50600a546001600160a01b031661040a565b3480156107e257600080fd5b506103dd611394565b3480156107f757600080fd5b50610479610806366004612708565b6113a3565b34801561081757600080fd5b506103c6610826366004612708565b6113f9565b34801561083757600080fd5b506103c66108463660046125a8565b6115a3565b34801561085757600080fd5b506103c66115ae565b34801561086c57600080fd5b50601854610880906001600160a01b031681565b60405161039d9190612fda565b34801561089957600080fd5b506103c66108a8366004612529565b6115ed565b3480156108b957600080fd5b5061047960115481565b3480156108cf57600080fd5b506103dd61161f565b3480156108e457600080fd5b506103dd6108f3366004612708565b61162c565b34801561090457600080fd5b50610479610913366004612708565b60166020526000908152604090205481565b34801561093157600080fd5b506103c6610940366004612708565b611769565b34801561095157600080fd5b50610479600f5481565b34801561096757600080fd5b5060135461040a906001600160a01b031681565b34801561098757600080fd5b506103c66109963660046126cd565b611798565b3480156109a757600080fd5b506103906109b636600461249c565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156109f057600080fd5b5061047960125481565b348015610a0657600080fd5b506103c6610a1536600461260e565b6117d5565b348015610a2657600080fd5b506103c6610a353660046126cd565b611867565b348015610a4657600080fd5b506103c6610a5536600461247b565b6118a4565b348015610a6657600080fd5b506103c6610a7536600461247b565b611900565b60006001600160e01b0319821663780e9d6360e01b1480610a9f5750610a9f8261194c565b92915050565b600a546001600160a01b03163314610ad85760405162461bcd60e51b8152600401610acf90613109565b60405180910390fd5b60138054911515600160a01b0260ff60a01b19909216919091179055565b606060008054610b05906132be565b80601f0160208091040260200160405190810160405280929190818152602001828054610b31906132be565b8015610b7e5780601f10610b5357610100808354040283529160200191610b7e565b820191906000526020600020905b815481529060010190602001808311610b6157829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610bbc5760405162461bcd60e51b8152600401610acf906130f9565b506000908152600460205260409020546001600160a01b031690565b600d8054610be5906132be565b80601f0160208091040260200160405190810160405280929190818152602001828054610c11906132be565b8015610c5e5780601f10610c3357610100808354040283529160200191610c5e565b820191906000526020600020905b815481529060010190602001808311610c4157829003601f168201915b505050505081565b6000610c7182611139565b9050806001600160a01b0316836001600160a01b03161415610ca55760405162461bcd60e51b8152600401610acf90613139565b336001600160a01b0382161480610cc15750610cc181336109b6565b610cdd5760405162461bcd60e51b8152600401610acf906130a9565b610ce7838361199c565b505050565b600a546001600160a01b03163314610d165760405162461bcd60e51b8152600401610acf90613109565b601255565b610d253382611a0a565b610d415760405162461bcd60e51b8152600401610acf9061315e565b610ce7838383611abc565b6000610d57836111cf565b8210610d755760405162461bcd60e51b8152600401610acf90613009565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b03163314610dc85760405162461bcd60e51b8152600401610acf90613109565b6018546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610df9903090600401612f26565b60206040518083038186803b158015610e1157600080fd5b505afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e499190612729565b905060008111610e5857600080fd5b60185460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610e8a9033908590600401612fa0565b602060405180830381600087803b158015610ea457600080fd5b505af1158015610eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edc919061266a565b5050565b610ce7838383604051806020016040528060008152506115ed565b60606000610f08836111cf565b905060008167ffffffffffffffff811115610f2557610f256133b5565b604051908082528060200260200182016040528015610f4e578160200160208202803683370190505b50905060005b82811015610f9557610f668582610d4c565b828281518110610f7857610f7861339f565b602090810291909101015280610f8d81613318565b915050610f54565b509392505050565b600a546001600160a01b03163314610fc75760405162461bcd60e51b8152600401610acf90613109565b600e55565b6000610fd760085490565b8210610ff55760405162461bcd60e51b8152600401610acf9061316e565b600882815481106110085761100861339f565b90600052602060002001549050919050565b6013546001600160a01b031633146110445760405162461bcd60e51b8152600401610acf90613149565b801561105e57506000908152601760205260409020429055565b600082815260176020908152604080832054601690925290912054611084904290613202565b61108e919061324d565b60008381526016602090815260408083209390935560179052908120555050565b600a546001600160a01b031633146110d95760405162461bcd60e51b8152600401610acf90613109565b8051610edc90600b9060208401906122ae565b6011546110f98284613202565b11156111175760405162461bcd60e51b8152600401610acf90613059565b601054811115610edc5760405162461bcd60e51b8152600401610acf90613089565b6000818152600260205260408120546001600160a01b031680610a9f5760405162461bcd60e51b8152600401610acf906130c9565b600a546001600160a01b031633146111985760405162461bcd60e51b8152600401610acf90613109565b600f55565b600a546000906001600160a01b031633146111ca5760405162461bcd60e51b8152600401610acf90613109565b504790565b60006001600160a01b0382166111f75760405162461bcd60e51b8152600401610acf906130b9565b506001600160a01b031660009081526003602052604090205490565b600a546060906001600160a01b031633146112405760405162461bcd60e51b8152600401610acf90613109565b600b8054610b05906132be565b600a546001600160a01b031633146112775760405162461bcd60e51b8152600401610acf90613109565b6112816000611be9565b565b600a546001600160a01b031633146112ad5760405162461bcd60e51b8152600401610acf90613109565b601055565b600a546001600160a01b031633146112dc5760405162461bcd60e51b8152600401610acf90613109565b600082116112fc5760405162461bcd60e51b8152600401610acf9061317e565b600061130760085490565b600f549091506113178483613202565b11156113355760405162461bcd60e51b8152600401610acf906130d9565b60015b83811161138e576001600160a01b038316600090815260156020526040812080549161136383613318565b9091555061137c9050836113778385613202565b611c3b565b8061138681613318565b915050611338565b50505050565b606060018054610b05906132be565b600081815260166020908152604080832054601790925282205415610a9f576000838152601760209081526040808320546016909252909120546113e8904290613202565b6113f2919061324d565b9392505050565b601354600160a01b900460ff16156114235760405162461bcd60e51b8152600401610acf90613119565b6012544210156114455760405162461bcd60e51b8152600401610acf90612ff9565b80600081116114665760405162461bcd60e51b8152600401610acf9061317e565b600061147160085490565b3360009081526015602052604090205490915061148e81856110ec565b600f5461149b8584613202565b11156114b95760405162461bcd60e51b8152600401610acf906130d9565b601854600e546001600160a01b03909116906323b872dd90339030906114e090899061322e565b6040518463ffffffff1660e01b81526004016114fe93929190612f34565b602060405180830381600087803b15801561151857600080fd5b505af115801561152c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611550919061266a565b5060015b84811161159c5733600090815260156020526040812080549161157683613318565b9091555061158a9050336113778386613202565b8061159481613318565b915050611554565b5050505050565b610edc338383611c55565b600a546001600160a01b031633146115d85760405162461bcd60e51b8152600401610acf90613109565b6013805460ff60a81b1916600160a81b179055565b6115f73383611a0a565b6116135760405162461bcd60e51b8152600401610acf9061315e565b61138e84848484611cf8565b600c8054610be5906132be565b6000818152600260205260409020546060906001600160a01b03166116635760405162461bcd60e51b8152600401610acf90613129565b601354600160a81b900460ff1661170657600d8054611681906132be565b80601f01602080910402602001604051908101604052809291908181526020018280546116ad906132be565b80156116fa5780601f106116cf576101008083540402835291602001916116fa565b820191906000526020600020905b8154815290600101906020018083116116dd57829003601f168201915b50505050509050919050565b6000611710611d2b565b9050600081511161173057604051806020016040528060008152506113f2565b8061173a84611d3a565b600c60405160200161174e93929190612ef9565b6040516020818303038152906040529392505050565b919050565b600a546001600160a01b031633146117935760405162461bcd60e51b8152600401610acf90613109565b601155565b600a546001600160a01b031633146117c25760405162461bcd60e51b8152600401610acf90613109565b8051610edc90600c9060208401906122ae565b600a546001600160a01b031633146117ff5760405162461bcd60e51b8152600401610acf90613109565b60005b8151811015610edc576001601460008484815181106118235761182361339f565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061185f81613318565b915050611802565b600a546001600160a01b031633146118915760405162461bcd60e51b8152600401610acf90613109565b8051610edc90600d9060208401906122ae565b600a546001600160a01b031633146118ce5760405162461bcd60e51b8152600401610acf90613109565b6001600160a01b0381166118f45760405162461bcd60e51b8152600401610acf90613029565b6118fd81611be9565b50565b600a546001600160a01b0316331461192a5760405162461bcd60e51b8152600401610acf90613109565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b031982166380ac58cd60e01b148061197d57506001600160e01b03198216635b5e139f60e01b145b80610a9f57506301ffc9a760e01b6001600160e01b0319831614610a9f565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119d182611139565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611a3e5760405162461bcd60e51b8152600401610acf90613099565b6000611a4983611139565b9050806001600160a01b0316846001600160a01b03161480611a845750836001600160a01b0316611a7984610b88565b6001600160a01b0316145b80611ab457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611acf82611139565b6001600160a01b031614611af55760405162461bcd60e51b8152600401610acf90613039565b6001600160a01b038216611b1b5760405162461bcd60e51b8152600401610acf90613069565b611b26838383611e38565b611b3160008261199c565b6001600160a01b0383166000908152600360205260408120805460019290611b5a90849061324d565b90915550506001600160a01b0382166000908152600360205260408120805460019290611b88908490613202565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610edc828260405180602001604052806000815250611ef0565b816001600160a01b0316836001600160a01b03161415611c875760405162461bcd60e51b8152600401610acf90613079565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611ceb908590612fcc565b60405180910390a3505050565b611d03848484611abc565b611d0f84848484611f23565b61138e5760405162461bcd60e51b8152600401610acf90613019565b6060600b8054610b05906132be565b606081611d5e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611d885780611d7281613318565b9150611d819050600a8361321a565b9150611d62565b60008167ffffffffffffffff811115611da357611da36133b5565b6040519080825280601f01601f191660200182016040528015611dcd576020820181803683370190505b5090505b8415611ab457611de260018361324d565b9150611def600a86613333565b611dfa906030613202565b60f81b818381518110611e0f57611e0f61339f565b60200101906001600160f81b031916908160001a905350611e31600a8661321a565b9450611dd1565b6001600160a01b038316611e9357611e8e81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611eb6565b816001600160a01b0316836001600160a01b031614611eb657611eb68382612030565b6001600160a01b038216611ecd57610ce7816120cd565b826001600160a01b0316826001600160a01b031614610ce757610ce7828261217c565b611efa83836121c0565b611f076000848484611f23565b610ce75760405162461bcd60e51b8152600401610acf90613019565b60006001600160a01b0384163b1561202557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611f67903390899088908890600401612f5c565b602060405180830381600087803b158015611f8157600080fd5b505af1925050508015611fb1575060408051601f3d908101601f19168201909252611fae918101906126ac565b60015b61200b573d808015611fdf576040519150601f19603f3d011682016040523d82523d6000602084013e611fe4565b606091505b5080516120035760405162461bcd60e51b8152600401610acf90613019565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611ab4565b506001949350505050565b6000600161203d846111cf565b612047919061324d565b60008381526007602052604090205490915080821461209a576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906120df9060019061324d565b600083815260096020526040812054600880549394509092849081106121075761210761339f565b9060005260206000200154905080600883815481106121285761212861339f565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061216057612160613389565b6001900381819060005260206000200160009055905550505050565b6000612187836111cf565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166121e65760405162461bcd60e51b8152600401610acf906130e9565b6000818152600260205260409020546001600160a01b03161561221b5760405162461bcd60e51b8152600401610acf90613049565b61222760008383611e38565b6001600160a01b0382166000908152600360205260408120805460019290612250908490613202565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8280546122ba906132be565b90600052602060002090601f0160209004810192826122dc5760008555612322565b82601f106122f557805160ff1916838001178555612322565b82800160010185558215612322579182015b82811115612322578251825591602001919060010190612307565b5061232e929150612332565b5090565b5b8082111561232e5760008155600101612333565b600061235a612355846131b3565b61319c565b9050808382526020820190508285602086028201111561237c5761237c600080fd5b60005b858110156123a8578161239288826123e6565b845250602092830192919091019060010161237f565b5050509392505050565b60006123c0612355846131d7565b9050828152602081018484840111156123db576123db600080fd5b610f95848285613286565b8035610a9f816133cb565b600082601f83011261240557612405600080fd5b8135611ab4848260208601612347565b8035610a9f816133df565b8051610a9f816133df565b8035610a9f816133e7565b8051610a9f816133e7565b600082601f83011261245557612455600080fd5b8135611ab48482602086016123b2565b8035610a9f816133f7565b8051610a9f816133f7565b60006020828403121561249057612490600080fd5b6000611ab484846123e6565b600080604083850312156124b2576124b2600080fd5b60006124be85856123e6565b92505060206124cf858286016123e6565b9150509250929050565b6000806000606084860312156124f1576124f1600080fd5b60006124fd86866123e6565b935050602061250e868287016123e6565b925050604061251f86828701612465565b9150509250925092565b6000806000806080858703121561254257612542600080fd5b600061254e87876123e6565b945050602061255f878288016123e6565b935050604061257087828801612465565b925050606085013567ffffffffffffffff81111561259057612590600080fd5b61259c87828801612441565b91505092959194509250565b600080604083850312156125be576125be600080fd5b60006125ca85856123e6565b92505060206124cf85828601612415565b600080604083850312156125f1576125f1600080fd5b60006125fd85856123e6565b92505060206124cf85828601612465565b60006020828403121561262357612623600080fd5b813567ffffffffffffffff81111561263d5761263d600080fd5b611ab4848285016123f1565b60006020828403121561265e5761265e600080fd5b6000611ab48484612415565b60006020828403121561267f5761267f600080fd5b6000611ab48484612420565b6000602082840312156126a0576126a0600080fd5b6000611ab4848461242b565b6000602082840312156126c1576126c1600080fd5b6000611ab48484612436565b6000602082840312156126e2576126e2600080fd5b813567ffffffffffffffff8111156126fc576126fc600080fd5b611ab484828501612441565b60006020828403121561271d5761271d600080fd5b6000611ab48484612465565b60006020828403121561273e5761273e600080fd5b6000611ab48484612470565b6000806040838503121561276057612760600080fd5b60006124be8585612465565b6000806040838503121561278257612782600080fd5b60006125ca8585612465565b600080604083850312156127a4576127a4600080fd5b60006125fd8585612465565b60006127bc8383612ef3565b505060200190565b6127cd81613264565b82525050565b60006127dd825190565b80845260209384019383018060005b8381101561281157815161280088826127b0565b9750602083019250506001016127ec565b509495945050505050565b8015156127cd565b600061282e825190565b808452602084019350612845818560208601613292565b601f01601f19169290920192915050565b6127cd81613275565b6000612869825190565b612877818560208601613292565b9290920192915050565b6000815461288e816132be565b6001821680156128a557600181146128b6576128e6565b60ff198316865281860193506128e6565b60008581526020902060005b838110156128de578154888201526001909101906020016128c2565b838801955050505b50505092915050565b601881526000602082017f53616c6520686173206e6f742073746172746564207965740000000000000000815291505b5060200190565b602b81526000602082017f455243373231456e756d657261626c653a206f776e657220696e646578206f7581526a74206f6620626f756e647360a81b602082015291505b5060400190565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6020820152915061296a565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b6020820152915061296a565b602581526000602082017f4552433732313a207472616e736665722066726f6d20696e636f72726563742081526437bbb732b960d91b6020820152915061296a565b601c81526000602082017f4552433732313a20746f6b656e20616c7265616479206d696e746564000000008152915061291f565b601c81526000602082017f6d6178204e4654207065722061646472657373206578636565646564000000008152915061291f565b602481526000602082017f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b6020820152915061296a565b601981526000602082017f4552433732313a20617070726f766520746f2063616c6c6572000000000000008152915061291f565b602881526000602082017f6d6178206d696e7420616d6f756e7420706572207472616e73616374696f6e20815267195e18d95959195960c21b6020820152915061296a565b602c81526000602082017f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657881526b34b9ba32b73a103a37b5b2b760a11b6020820152915061296a565b603881526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7781527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020820152915061296a565b602a81526000602082017f4552433732313a2062616c616e636520717565727920666f7220746865207a65815269726f206164647265737360b01b6020820152915061296a565b602981526000602082017f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481526832b73a103a37b5b2b760b91b6020820152915061296a565b60168152600060208201751b585e08139195081b1a5b5a5d08195e18d95959195960521b8152915061291f565b60208082527f4552433732313a206d696e7420746f20746865207a65726f20616464726573739101908152600061291f565b602c81526000602082017f4552433732313a20617070726f76656420717565727920666f72206e6f6e657881526b34b9ba32b73a103a37b5b2b760a11b6020820152915061296a565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152600061291f565b60168152600060208201751d1a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b8152915061291f565b602f81526000602082017f4552433732314d657461646174613a2055524920717565727920666f72206e6f81526e3732bc34b9ba32b73a103a37b5b2b760891b6020820152915061296a565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b6020820152915061296a565b603181526000602082017f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f8152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6020820152915061296a565b602c81526000602082017f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81526b7574206f6620626f756e647360a01b6020820152915061296a565b601b81526000602082017f6e65656420746f206d696e74206174206c656173742031204e465400000000008152915061291f565b806127cd565b6000612f05828661285f565b9150612f11828561285f565b9150612f1d8284612881565b95945050505050565b60208101610a9f82846127c4565b60608101612f4282866127c4565b612f4f60208301856127c4565b611ab46040830184612ef3565b60808101612f6a82876127c4565b612f7760208301866127c4565b612f846040830185612ef3565b8181036060830152612f968184612824565b9695505050505050565b60408101612fae82856127c4565b6113f26020830184612ef3565b602080825281016113f281846127d3565b60208101610a9f828461281c565b60208101610a9f8284612856565b602080825281016113f28184612824565b60208082528101610a9f816128ef565b60208082528101610a9f81612926565b60208082528101610a9f81612971565b60208082528101610a9f816129c0565b60208082528101610a9f81612a03565b60208082528101610a9f81612a45565b60208082528101610a9f81612a79565b60208082528101610a9f81612aad565b60208082528101610a9f81612aee565b60208082528101610a9f81612b22565b60208082528101610a9f81612b67565b60208082528101610a9f81612bb0565b60208082528101610a9f81612c0a565b60208082528101610a9f81612c51565b60208082528101610a9f81612c97565b60208082528101610a9f81612cc4565b60208082528101610a9f81612cf6565b60208082528101610a9f81612d3f565b60208082528101610a9f81612d71565b60208082528101610a9f81612d9e565b60208082528101610a9f81612dea565b60208082528101610a9f816000815260200190565b60208082528101610a9f81612e28565b60208082528101610a9f81612e76565b60208082528101610a9f81612ebf565b60208101610a9f8284612ef3565b60006131a760405190565b905061176482826132eb565b600067ffffffffffffffff8211156131cd576131cd6133b5565b5060209081020190565b600067ffffffffffffffff8211156131f1576131f16133b5565b601f19601f83011660200192915050565b6000821982111561321557613215613347565b500190565b6000826132295761322961335d565b500490565b600081600019048311821515161561324857613248613347565b500290565b60008282101561325f5761325f613347565b500390565b60006001600160a01b038216610a9f565b6000610a9f826000610a9f82613264565b82818337506000910152565b60005b838110156132ad578181015183820152602001613295565b8381111561138e5750506000910152565b6002810460018216806132d257607f821691505b602082108114156132e5576132e5613373565b50919050565b601f19601f830116810181811067ffffffffffffffff82111715613311576133116133b5565b6040525050565b600060001982141561332c5761332c613347565b5060010190565b6000826133425761334261335d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6133d481613264565b81146118fd57600080fd5b8015156133d4565b6001600160e01b031981166133d4565b806133d456fea2646970667358221220203a7a5741c293d6bc445d5ddc9f6932e10611fd2bc4af286f93923e891b815064736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061036b5760003560e01c806370a08231116101c6578063ba7d2c76116100f7578063da3ef23f11610095578063edec5f271161006f578063edec5f27146109fa578063f2c4ce1e14610a1a578063f2fde38b14610a3a578063f4e0d9ac14610a5a57600080fd5b8063da3ef23f1461097b578063e985e9c51461099b578063eced3873146109e457600080fd5b8063cfa92d94116100d1578063cfa92d94146108f8578063d0eb26b014610925578063d5abeb0114610945578063d7b4be241461095b57600080fd5b8063ba7d2c76146108ad578063c6682862146108c3578063c87b56dd146108d857600080fd5b806395d89b4111610164578063a22cb4651161013e578063a22cb4651461082b578063a475b5dd1461084b578063ae1f5a9414610860578063b88d4fde1461088d57600080fd5b806395d89b41146107d65780639b6b3f6b146107eb578063a0712d681461080b57600080fd5b80637f00c7a6116101a05780637f00c7a614610763578063831e60de1461078357806383a076be146107985780638da5cb5b146107b857600080fd5b806370a0823114610719578063714c539814610739578063715018a61461074e57600080fd5b80633af32abf116102a057806353e4c0b81161023e5780635c975abb116102185780635c975abb146106a35780636352211e146106c45780636f8b44b0146106e45780636f9fb98a1461070457600080fd5b806353e4c0b81461064357806355f804b3146106635780635b0d65d81461068357600080fd5b8063438b63001161027a578063438b6300146105b557806344a0d68a146105e25780634f6ccce714610602578063518302271461062257600080fd5b80633af32abf146105545780633ccfd60b1461058d57806342842e0e1461059557600080fd5b80630e54a8831161030d57806318cae269116102e757806318cae269146104d1578063239c70ae146104fe57806323b872dd146105145780632f745c591461053457600080fd5b80630e54a8831461048657806313faede6146104a657806318160ddd146104bc57600080fd5b8063081812fc11610349578063081812fc146103ea578063081c8c4414610417578063095ea7b31461042c5780630a42f0491461044c57600080fd5b806301ffc9a71461037057806302329a29146103a657806306fdde03146103c8575b600080fd5b34801561037c57600080fd5b5061039061038b36600461268b565b610a7a565b60405161039d9190612fcc565b60405180910390f35b3480156103b257600080fd5b506103c66103c1366004612649565b610aa5565b005b3480156103d457600080fd5b506103dd610af6565b60405161039d9190612fe8565b3480156103f657600080fd5b5061040a610405366004612708565b610b88565b60405161039d9190612f26565b34801561042357600080fd5b506103dd610bd8565b34801561043857600080fd5b506103c66104473660046125db565b610c66565b34801561045857600080fd5b50610479610467366004612708565b60176020526000908152604090205481565b60405161039d919061318e565b34801561049257600080fd5b506103c66104a1366004612708565b610cec565b3480156104b257600080fd5b50610479600e5481565b3480156104c857600080fd5b50600854610479565b3480156104dd57600080fd5b506104796104ec36600461247b565b60156020526000908152604090205481565b34801561050a57600080fd5b5061047960105481565b34801561052057600080fd5b506103c661052f3660046124d9565b610d1b565b34801561054057600080fd5b5061047961054f3660046125db565b610d4c565b34801561056057600080fd5b5061039061056f36600461247b565b6001600160a01b031660009081526014602052604090205460ff1690565b6103c6610d9e565b3480156105a157600080fd5b506103c66105b03660046124d9565b610ee0565b3480156105c157600080fd5b506105d56105d036600461247b565b610efb565b60405161039d9190612fbb565b3480156105ee57600080fd5b506103c66105fd366004612708565b610f9d565b34801561060e57600080fd5b5061047961061d366004612708565b610fcc565b34801561062e57600080fd5b5060135461039090600160a81b900460ff1681565b34801561064f57600080fd5b506103c661065e36600461276c565b61101a565b34801561066f57600080fd5b506103c661067e3660046126cd565b6110af565b34801561068f57600080fd5b506103c661069e36600461278e565b6110ec565b3480156106af57600080fd5b5060135461039090600160a01b900460ff1681565b3480156106d057600080fd5b5061040a6106df366004612708565b611139565b3480156106f057600080fd5b506103c66106ff366004612708565b61116e565b34801561071057600080fd5b5061047961119d565b34801561072557600080fd5b5061047961073436600461247b565b6111cf565b34801561074557600080fd5b506103dd611213565b34801561075a57600080fd5b506103c661124d565b34801561076f57600080fd5b506103c661077e366004612708565b611283565b34801561078f57600080fd5b50600e54610479565b3480156107a457600080fd5b506103c66107b336600461274a565b6112b2565b3480156107c457600080fd5b50600a546001600160a01b031661040a565b3480156107e257600080fd5b506103dd611394565b3480156107f757600080fd5b50610479610806366004612708565b6113a3565b34801561081757600080fd5b506103c6610826366004612708565b6113f9565b34801561083757600080fd5b506103c66108463660046125a8565b6115a3565b34801561085757600080fd5b506103c66115ae565b34801561086c57600080fd5b50601854610880906001600160a01b031681565b60405161039d9190612fda565b34801561089957600080fd5b506103c66108a8366004612529565b6115ed565b3480156108b957600080fd5b5061047960115481565b3480156108cf57600080fd5b506103dd61161f565b3480156108e457600080fd5b506103dd6108f3366004612708565b61162c565b34801561090457600080fd5b50610479610913366004612708565b60166020526000908152604090205481565b34801561093157600080fd5b506103c6610940366004612708565b611769565b34801561095157600080fd5b50610479600f5481565b34801561096757600080fd5b5060135461040a906001600160a01b031681565b34801561098757600080fd5b506103c66109963660046126cd565b611798565b3480156109a757600080fd5b506103906109b636600461249c565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156109f057600080fd5b5061047960125481565b348015610a0657600080fd5b506103c6610a1536600461260e565b6117d5565b348015610a2657600080fd5b506103c6610a353660046126cd565b611867565b348015610a4657600080fd5b506103c6610a5536600461247b565b6118a4565b348015610a6657600080fd5b506103c6610a7536600461247b565b611900565b60006001600160e01b0319821663780e9d6360e01b1480610a9f5750610a9f8261194c565b92915050565b600a546001600160a01b03163314610ad85760405162461bcd60e51b8152600401610acf90613109565b60405180910390fd5b60138054911515600160a01b0260ff60a01b19909216919091179055565b606060008054610b05906132be565b80601f0160208091040260200160405190810160405280929190818152602001828054610b31906132be565b8015610b7e5780601f10610b5357610100808354040283529160200191610b7e565b820191906000526020600020905b815481529060010190602001808311610b6157829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610bbc5760405162461bcd60e51b8152600401610acf906130f9565b506000908152600460205260409020546001600160a01b031690565b600d8054610be5906132be565b80601f0160208091040260200160405190810160405280929190818152602001828054610c11906132be565b8015610c5e5780601f10610c3357610100808354040283529160200191610c5e565b820191906000526020600020905b815481529060010190602001808311610c4157829003601f168201915b505050505081565b6000610c7182611139565b9050806001600160a01b0316836001600160a01b03161415610ca55760405162461bcd60e51b8152600401610acf90613139565b336001600160a01b0382161480610cc15750610cc181336109b6565b610cdd5760405162461bcd60e51b8152600401610acf906130a9565b610ce7838361199c565b505050565b600a546001600160a01b03163314610d165760405162461bcd60e51b8152600401610acf90613109565b601255565b610d253382611a0a565b610d415760405162461bcd60e51b8152600401610acf9061315e565b610ce7838383611abc565b6000610d57836111cf565b8210610d755760405162461bcd60e51b8152600401610acf90613009565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b03163314610dc85760405162461bcd60e51b8152600401610acf90613109565b6018546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610df9903090600401612f26565b60206040518083038186803b158015610e1157600080fd5b505afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e499190612729565b905060008111610e5857600080fd5b60185460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610e8a9033908590600401612fa0565b602060405180830381600087803b158015610ea457600080fd5b505af1158015610eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edc919061266a565b5050565b610ce7838383604051806020016040528060008152506115ed565b60606000610f08836111cf565b905060008167ffffffffffffffff811115610f2557610f256133b5565b604051908082528060200260200182016040528015610f4e578160200160208202803683370190505b50905060005b82811015610f9557610f668582610d4c565b828281518110610f7857610f7861339f565b602090810291909101015280610f8d81613318565b915050610f54565b509392505050565b600a546001600160a01b03163314610fc75760405162461bcd60e51b8152600401610acf90613109565b600e55565b6000610fd760085490565b8210610ff55760405162461bcd60e51b8152600401610acf9061316e565b600882815481106110085761100861339f565b90600052602060002001549050919050565b6013546001600160a01b031633146110445760405162461bcd60e51b8152600401610acf90613149565b801561105e57506000908152601760205260409020429055565b600082815260176020908152604080832054601690925290912054611084904290613202565b61108e919061324d565b60008381526016602090815260408083209390935560179052908120555050565b600a546001600160a01b031633146110d95760405162461bcd60e51b8152600401610acf90613109565b8051610edc90600b9060208401906122ae565b6011546110f98284613202565b11156111175760405162461bcd60e51b8152600401610acf90613059565b601054811115610edc5760405162461bcd60e51b8152600401610acf90613089565b6000818152600260205260408120546001600160a01b031680610a9f5760405162461bcd60e51b8152600401610acf906130c9565b600a546001600160a01b031633146111985760405162461bcd60e51b8152600401610acf90613109565b600f55565b600a546000906001600160a01b031633146111ca5760405162461bcd60e51b8152600401610acf90613109565b504790565b60006001600160a01b0382166111f75760405162461bcd60e51b8152600401610acf906130b9565b506001600160a01b031660009081526003602052604090205490565b600a546060906001600160a01b031633146112405760405162461bcd60e51b8152600401610acf90613109565b600b8054610b05906132be565b600a546001600160a01b031633146112775760405162461bcd60e51b8152600401610acf90613109565b6112816000611be9565b565b600a546001600160a01b031633146112ad5760405162461bcd60e51b8152600401610acf90613109565b601055565b600a546001600160a01b031633146112dc5760405162461bcd60e51b8152600401610acf90613109565b600082116112fc5760405162461bcd60e51b8152600401610acf9061317e565b600061130760085490565b600f549091506113178483613202565b11156113355760405162461bcd60e51b8152600401610acf906130d9565b60015b83811161138e576001600160a01b038316600090815260156020526040812080549161136383613318565b9091555061137c9050836113778385613202565b611c3b565b8061138681613318565b915050611338565b50505050565b606060018054610b05906132be565b600081815260166020908152604080832054601790925282205415610a9f576000838152601760209081526040808320546016909252909120546113e8904290613202565b6113f2919061324d565b9392505050565b601354600160a01b900460ff16156114235760405162461bcd60e51b8152600401610acf90613119565b6012544210156114455760405162461bcd60e51b8152600401610acf90612ff9565b80600081116114665760405162461bcd60e51b8152600401610acf9061317e565b600061147160085490565b3360009081526015602052604090205490915061148e81856110ec565b600f5461149b8584613202565b11156114b95760405162461bcd60e51b8152600401610acf906130d9565b601854600e546001600160a01b03909116906323b872dd90339030906114e090899061322e565b6040518463ffffffff1660e01b81526004016114fe93929190612f34565b602060405180830381600087803b15801561151857600080fd5b505af115801561152c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611550919061266a565b5060015b84811161159c5733600090815260156020526040812080549161157683613318565b9091555061158a9050336113778386613202565b8061159481613318565b915050611554565b5050505050565b610edc338383611c55565b600a546001600160a01b031633146115d85760405162461bcd60e51b8152600401610acf90613109565b6013805460ff60a81b1916600160a81b179055565b6115f73383611a0a565b6116135760405162461bcd60e51b8152600401610acf9061315e565b61138e84848484611cf8565b600c8054610be5906132be565b6000818152600260205260409020546060906001600160a01b03166116635760405162461bcd60e51b8152600401610acf90613129565b601354600160a81b900460ff1661170657600d8054611681906132be565b80601f01602080910402602001604051908101604052809291908181526020018280546116ad906132be565b80156116fa5780601f106116cf576101008083540402835291602001916116fa565b820191906000526020600020905b8154815290600101906020018083116116dd57829003601f168201915b50505050509050919050565b6000611710611d2b565b9050600081511161173057604051806020016040528060008152506113f2565b8061173a84611d3a565b600c60405160200161174e93929190612ef9565b6040516020818303038152906040529392505050565b919050565b600a546001600160a01b031633146117935760405162461bcd60e51b8152600401610acf90613109565b601155565b600a546001600160a01b031633146117c25760405162461bcd60e51b8152600401610acf90613109565b8051610edc90600c9060208401906122ae565b600a546001600160a01b031633146117ff5760405162461bcd60e51b8152600401610acf90613109565b60005b8151811015610edc576001601460008484815181106118235761182361339f565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061185f81613318565b915050611802565b600a546001600160a01b031633146118915760405162461bcd60e51b8152600401610acf90613109565b8051610edc90600d9060208401906122ae565b600a546001600160a01b031633146118ce5760405162461bcd60e51b8152600401610acf90613109565b6001600160a01b0381166118f45760405162461bcd60e51b8152600401610acf90613029565b6118fd81611be9565b50565b600a546001600160a01b0316331461192a5760405162461bcd60e51b8152600401610acf90613109565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b031982166380ac58cd60e01b148061197d57506001600160e01b03198216635b5e139f60e01b145b80610a9f57506301ffc9a760e01b6001600160e01b0319831614610a9f565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119d182611139565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611a3e5760405162461bcd60e51b8152600401610acf90613099565b6000611a4983611139565b9050806001600160a01b0316846001600160a01b03161480611a845750836001600160a01b0316611a7984610b88565b6001600160a01b0316145b80611ab457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611acf82611139565b6001600160a01b031614611af55760405162461bcd60e51b8152600401610acf90613039565b6001600160a01b038216611b1b5760405162461bcd60e51b8152600401610acf90613069565b611b26838383611e38565b611b3160008261199c565b6001600160a01b0383166000908152600360205260408120805460019290611b5a90849061324d565b90915550506001600160a01b0382166000908152600360205260408120805460019290611b88908490613202565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610edc828260405180602001604052806000815250611ef0565b816001600160a01b0316836001600160a01b03161415611c875760405162461bcd60e51b8152600401610acf90613079565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611ceb908590612fcc565b60405180910390a3505050565b611d03848484611abc565b611d0f84848484611f23565b61138e5760405162461bcd60e51b8152600401610acf90613019565b6060600b8054610b05906132be565b606081611d5e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611d885780611d7281613318565b9150611d819050600a8361321a565b9150611d62565b60008167ffffffffffffffff811115611da357611da36133b5565b6040519080825280601f01601f191660200182016040528015611dcd576020820181803683370190505b5090505b8415611ab457611de260018361324d565b9150611def600a86613333565b611dfa906030613202565b60f81b818381518110611e0f57611e0f61339f565b60200101906001600160f81b031916908160001a905350611e31600a8661321a565b9450611dd1565b6001600160a01b038316611e9357611e8e81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611eb6565b816001600160a01b0316836001600160a01b031614611eb657611eb68382612030565b6001600160a01b038216611ecd57610ce7816120cd565b826001600160a01b0316826001600160a01b031614610ce757610ce7828261217c565b611efa83836121c0565b611f076000848484611f23565b610ce75760405162461bcd60e51b8152600401610acf90613019565b60006001600160a01b0384163b1561202557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611f67903390899088908890600401612f5c565b602060405180830381600087803b158015611f8157600080fd5b505af1925050508015611fb1575060408051601f3d908101601f19168201909252611fae918101906126ac565b60015b61200b573d808015611fdf576040519150601f19603f3d011682016040523d82523d6000602084013e611fe4565b606091505b5080516120035760405162461bcd60e51b8152600401610acf90613019565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611ab4565b506001949350505050565b6000600161203d846111cf565b612047919061324d565b60008381526007602052604090205490915080821461209a576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906120df9060019061324d565b600083815260096020526040812054600880549394509092849081106121075761210761339f565b9060005260206000200154905080600883815481106121285761212861339f565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061216057612160613389565b6001900381819060005260206000200160009055905550505050565b6000612187836111cf565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166121e65760405162461bcd60e51b8152600401610acf906130e9565b6000818152600260205260409020546001600160a01b03161561221b5760405162461bcd60e51b8152600401610acf90613049565b61222760008383611e38565b6001600160a01b0382166000908152600360205260408120805460019290612250908490613202565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8280546122ba906132be565b90600052602060002090601f0160209004810192826122dc5760008555612322565b82601f106122f557805160ff1916838001178555612322565b82800160010185558215612322579182015b82811115612322578251825591602001919060010190612307565b5061232e929150612332565b5090565b5b8082111561232e5760008155600101612333565b600061235a612355846131b3565b61319c565b9050808382526020820190508285602086028201111561237c5761237c600080fd5b60005b858110156123a8578161239288826123e6565b845250602092830192919091019060010161237f565b5050509392505050565b60006123c0612355846131d7565b9050828152602081018484840111156123db576123db600080fd5b610f95848285613286565b8035610a9f816133cb565b600082601f83011261240557612405600080fd5b8135611ab4848260208601612347565b8035610a9f816133df565b8051610a9f816133df565b8035610a9f816133e7565b8051610a9f816133e7565b600082601f83011261245557612455600080fd5b8135611ab48482602086016123b2565b8035610a9f816133f7565b8051610a9f816133f7565b60006020828403121561249057612490600080fd5b6000611ab484846123e6565b600080604083850312156124b2576124b2600080fd5b60006124be85856123e6565b92505060206124cf858286016123e6565b9150509250929050565b6000806000606084860312156124f1576124f1600080fd5b60006124fd86866123e6565b935050602061250e868287016123e6565b925050604061251f86828701612465565b9150509250925092565b6000806000806080858703121561254257612542600080fd5b600061254e87876123e6565b945050602061255f878288016123e6565b935050604061257087828801612465565b925050606085013567ffffffffffffffff81111561259057612590600080fd5b61259c87828801612441565b91505092959194509250565b600080604083850312156125be576125be600080fd5b60006125ca85856123e6565b92505060206124cf85828601612415565b600080604083850312156125f1576125f1600080fd5b60006125fd85856123e6565b92505060206124cf85828601612465565b60006020828403121561262357612623600080fd5b813567ffffffffffffffff81111561263d5761263d600080fd5b611ab4848285016123f1565b60006020828403121561265e5761265e600080fd5b6000611ab48484612415565b60006020828403121561267f5761267f600080fd5b6000611ab48484612420565b6000602082840312156126a0576126a0600080fd5b6000611ab4848461242b565b6000602082840312156126c1576126c1600080fd5b6000611ab48484612436565b6000602082840312156126e2576126e2600080fd5b813567ffffffffffffffff8111156126fc576126fc600080fd5b611ab484828501612441565b60006020828403121561271d5761271d600080fd5b6000611ab48484612465565b60006020828403121561273e5761273e600080fd5b6000611ab48484612470565b6000806040838503121561276057612760600080fd5b60006124be8585612465565b6000806040838503121561278257612782600080fd5b60006125ca8585612465565b600080604083850312156127a4576127a4600080fd5b60006125fd8585612465565b60006127bc8383612ef3565b505060200190565b6127cd81613264565b82525050565b60006127dd825190565b80845260209384019383018060005b8381101561281157815161280088826127b0565b9750602083019250506001016127ec565b509495945050505050565b8015156127cd565b600061282e825190565b808452602084019350612845818560208601613292565b601f01601f19169290920192915050565b6127cd81613275565b6000612869825190565b612877818560208601613292565b9290920192915050565b6000815461288e816132be565b6001821680156128a557600181146128b6576128e6565b60ff198316865281860193506128e6565b60008581526020902060005b838110156128de578154888201526001909101906020016128c2565b838801955050505b50505092915050565b601881526000602082017f53616c6520686173206e6f742073746172746564207965740000000000000000815291505b5060200190565b602b81526000602082017f455243373231456e756d657261626c653a206f776e657220696e646578206f7581526a74206f6620626f756e647360a81b602082015291505b5060400190565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6020820152915061296a565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b6020820152915061296a565b602581526000602082017f4552433732313a207472616e736665722066726f6d20696e636f72726563742081526437bbb732b960d91b6020820152915061296a565b601c81526000602082017f4552433732313a20746f6b656e20616c7265616479206d696e746564000000008152915061291f565b601c81526000602082017f6d6178204e4654207065722061646472657373206578636565646564000000008152915061291f565b602481526000602082017f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b6020820152915061296a565b601981526000602082017f4552433732313a20617070726f766520746f2063616c6c6572000000000000008152915061291f565b602881526000602082017f6d6178206d696e7420616d6f756e7420706572207472616e73616374696f6e20815267195e18d95959195960c21b6020820152915061296a565b602c81526000602082017f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657881526b34b9ba32b73a103a37b5b2b760a11b6020820152915061296a565b603881526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7781527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020820152915061296a565b602a81526000602082017f4552433732313a2062616c616e636520717565727920666f7220746865207a65815269726f206164647265737360b01b6020820152915061296a565b602981526000602082017f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481526832b73a103a37b5b2b760b91b6020820152915061296a565b60168152600060208201751b585e08139195081b1a5b5a5d08195e18d95959195960521b8152915061291f565b60208082527f4552433732313a206d696e7420746f20746865207a65726f20616464726573739101908152600061291f565b602c81526000602082017f4552433732313a20617070726f76656420717565727920666f72206e6f6e657881526b34b9ba32b73a103a37b5b2b760a11b6020820152915061296a565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152600061291f565b60168152600060208201751d1a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b8152915061291f565b602f81526000602082017f4552433732314d657461646174613a2055524920717565727920666f72206e6f81526e3732bc34b9ba32b73a103a37b5b2b760891b6020820152915061296a565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b6020820152915061296a565b603181526000602082017f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f8152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6020820152915061296a565b602c81526000602082017f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81526b7574206f6620626f756e647360a01b6020820152915061296a565b601b81526000602082017f6e65656420746f206d696e74206174206c656173742031204e465400000000008152915061291f565b806127cd565b6000612f05828661285f565b9150612f11828561285f565b9150612f1d8284612881565b95945050505050565b60208101610a9f82846127c4565b60608101612f4282866127c4565b612f4f60208301856127c4565b611ab46040830184612ef3565b60808101612f6a82876127c4565b612f7760208301866127c4565b612f846040830185612ef3565b8181036060830152612f968184612824565b9695505050505050565b60408101612fae82856127c4565b6113f26020830184612ef3565b602080825281016113f281846127d3565b60208101610a9f828461281c565b60208101610a9f8284612856565b602080825281016113f28184612824565b60208082528101610a9f816128ef565b60208082528101610a9f81612926565b60208082528101610a9f81612971565b60208082528101610a9f816129c0565b60208082528101610a9f81612a03565b60208082528101610a9f81612a45565b60208082528101610a9f81612a79565b60208082528101610a9f81612aad565b60208082528101610a9f81612aee565b60208082528101610a9f81612b22565b60208082528101610a9f81612b67565b60208082528101610a9f81612bb0565b60208082528101610a9f81612c0a565b60208082528101610a9f81612c51565b60208082528101610a9f81612c97565b60208082528101610a9f81612cc4565b60208082528101610a9f81612cf6565b60208082528101610a9f81612d3f565b60208082528101610a9f81612d71565b60208082528101610a9f81612d9e565b60208082528101610a9f81612dea565b60208082528101610a9f816000815260200190565b60208082528101610a9f81612e28565b60208082528101610a9f81612e76565b60208082528101610a9f81612ebf565b60208101610a9f8284612ef3565b60006131a760405190565b905061176482826132eb565b600067ffffffffffffffff8211156131cd576131cd6133b5565b5060209081020190565b600067ffffffffffffffff8211156131f1576131f16133b5565b601f19601f83011660200192915050565b6000821982111561321557613215613347565b500190565b6000826132295761322961335d565b500490565b600081600019048311821515161561324857613248613347565b500290565b60008282101561325f5761325f613347565b500390565b60006001600160a01b038216610a9f565b6000610a9f826000610a9f82613264565b82818337506000910152565b60005b838110156132ad578181015183820152602001613295565b8381111561138e5750506000910152565b6002810460018216806132d257607f821691505b602082108114156132e5576132e5613373565b50919050565b601f19601f830116810181811067ffffffffffffffff82111715613311576133116133b5565b6040525050565b600060001982141561332c5761332c613347565b5060010190565b6000826133425761334261335d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6133d481613264565b81146118fd57600080fd5b8015156133d4565b6001600160e01b031981166133d4565b806133d456fea2646970667358221220203a7a5741c293d6bc445d5ddc9f6932e10611fd2bc4af286f93923e891b815064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 208,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 210,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 214,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 218,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 222,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 228,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1197,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1201,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1204,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1208,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2148,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "baseURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 2151,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "baseExtension",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 2153,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "notRevealedUri",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 2156,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "cost",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2159,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "maxSupply",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2162,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "maxMintAmount",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2165,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "nftPerAddressLimit",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2168,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "publicSaleDate",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 2170,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "stakingAddress",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 2173,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "paused",
        "offset": 20,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 2176,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "revealed",
        "offset": 21,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 2180,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "whitelistedAddresses",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2184,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "addressMintedBalance",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2188,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "stakedInTime",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2192,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "stakeTime",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2195,
        "contract": "contracts/AWBC.sol:AgencyWolfBillionaireClub",
        "label": "paymentsToken",
        "offset": 0,
        "slot": "24",
        "type": "t_contract(IERC20)182"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)182": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}