{
  "address": "0xD9ECDa7436f619aB2EECA58A856ad9fe814915Fd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_annex",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_boost",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devaddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_annexPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_boostAnnexPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bonusEndBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Boost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "UnBoost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BONUS_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "annex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "annexPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonusEndBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "boost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "boostAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boostAnnexPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boostFactor",
      "outputs": [
        {
          "internalType": "contract IBoostToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "boostFactors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "boostPartially",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devaddr",
          "type": "address"
        }
      ],
      "name": "dev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devaddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyNftWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getPoolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accAnnexPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalValidBoostNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalValidBoostCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accBoostAnnexPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isBoosted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumValidBoostCount",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingAnnex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "speed",
          "type": "uint256"
        }
      ],
      "name": "setAnnexPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "speed",
          "type": "uint256"
        }
      ],
      "name": "setBoostAnnexPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setBoostFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_count",
          "type": "uint16"
        }
      ],
      "name": "setMinimumValidBoostCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "unBoostAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "unBoostPartially",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reward",
          "type": "address"
        }
      ],
      "name": "updateRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boostRewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xef7bd51a8cb373b643c5b1790ee67dd7bd6a2f7cf0537d09dd353cf9fdb83cfb",
  "receipt": {
    "to": null,
    "from": "0x79395B873119a42c3B9E4211FCEA9CC0358769Ed",
    "contractAddress": "0xD9ECDa7436f619aB2EECA58A856ad9fe814915Fd",
    "transactionIndex": 0,
    "gasUsed": "2813132",
    "logsBloom": "0x
    "blockHash": "0x2552090768a8427358d32708db75a94f5913f2a7e97a968cfdc919fee723de35",
    "transactionHash": "0xef7bd51a8cb373b643c5b1790ee67dd7bd6a2f7cf0537d09dd353cf9fdb83cfb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17507854,
        "transactionHash": "0xef7bd51a8cb373b643c5b1790ee67dd7bd6a2f7cf0537d09dd353cf9fdb83cfb",
        "address": "0xD9ECDa7436f619aB2EECA58A856ad9fe814915Fd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000079395b873119a42c3b9e4211fcea9cc0358769ed"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2552090768a8427358d32708db75a94f5913f2a7e97a968cfdc919fee723de35"
      }
    ],
    "blockNumber": 17507854,
    "cumulativeGasUsed": "2813132",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb75f3F9D35d256a94BBd7A3fC2E16c768E17930E",
    "0x70Cc3a8FD70C5925a92FE1932616b6c89C78C698",
    "0x79395B873119a42c3B9E4211FCEA9CC0358769Ed",
    "10000000000000000",
    "10000000000000000",
    17437841,
    17507606
  ],
  "solcInputHash": "1984b35c543a8446cd1e30d225978377",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_annex\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boost\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_annexPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_boostAnnexPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Boost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"UnBoost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"annex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"annexPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"boost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"boostAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostAnnexPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostFactor\",\"outputs\":[{\"internalType\":\"contract IBoostToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boostFactors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"boostPartially\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyNftWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accAnnexPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalValidBoostNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalValidBoostCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBoostAnnexPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isBoosted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumValidBoostCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingAnnex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"}],\"name\":\"setAnnexPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"}],\"name\":\"setBoostAnnexPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBoostFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_count\",\"type\":\"uint16\"}],\"name\":\"setMinimumValidBoostCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"unBoostAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"unBoostPartially\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"updateRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostRewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AnnexBoostFarm.sol\":\"AnnexBoostFarm\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AnnexBoostFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/IBoostToken.sol\\\";\\nimport \\\"./interfaces/IERC721Receiver.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/EnumerableSet.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./libraries/ReentrancyGuard.sol\\\";\\n\\n// AnnexFarm is the master of Farm.\\n//\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once ANN is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\ncontract AnnexBoostFarm is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of ANNs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accAnnexPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accAnnexPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n        uint256[] boostFactors;\\n        uint256 boostRewardDebt; // Boost Reward debt. See explanation below.\\n    }\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. ANNs to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that ANNs distribution occurs.\\n        uint256 accAnnexPerShare; // Accumulated ANNs per share, times 1e12. See below.\\n        uint256 totalValidBoostNum; // Total valid boosted factor count.\\n        uint256 totalValidBoostCount; // Total valid boosted accounts count.\\n        uint256 accBoostAnnexPerShare; // Accumulated ANNs per share,.\\n    }\\n    // The Annex TOKEN!\\n    address public annex;\\n    // Dev address.\\n    address public devaddr;\\n    // Block number when bonus ANN period ends.\\n    uint256 public bonusEndBlock;\\n    // ANN tokens created per block.\\n    uint256 public annexPerBlock;\\n    // Bonus muliplier for early annex makers.\\n    uint256 public constant BONUS_MULTIPLIER = 10;\\n    // Info of each pool.\\n    PoolInfo[] private poolInfo;\\n    // Total ANN amount deposited in ANN single pool. To reduce tx-fee, not included in struct PoolInfo.\\n    uint256 private lpSupplyOfAnnPool;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Boosting Part\\n    // ANN tokens distribution for boosting per block.\\n    uint256 public boostAnnexPerBlock;\\n    // Minimum vaild boost NFT count\\n    uint16 public minimumValidBoostCount = 3;\\n    // NFT contract for boosting\\n    IBoostToken public boostFactor;\\n    // Boosted with NFT or not\\n    mapping (uint256 => bool) public isBoosted;\\n    // boostFactor list per address\\n    mapping (address => uint[]) public boostFactors;\\n\\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when ANN mining starts.\\n    uint256 public startBlock;\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event Boost(address indexed user, uint256 indexed pid, uint256 tokenId);\\n    event UnBoost(address indexed user, uint256 indexed pid, uint256 tokenId);\\n\\n    constructor(\\n        address _annex,\\n        address _boost,\\n        address _devaddr,\\n        uint256 _annexPerBlock,\\n        uint256 _boostAnnexPerBlock,\\n        uint256 _startBlock,\\n        uint256 _bonusEndBlock\\n    ) public {\\n        annex = _annex;\\n        boostFactor = IBoostToken(_boost);\\n        devaddr = _devaddr;\\n        annexPerBlock = _annexPerBlock;\\n        boostAnnexPerBlock = _boostAnnexPerBlock;\\n        bonusEndBlock = _bonusEndBlock;\\n        startBlock = _startBlock;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function getPoolInfo(uint _pid) external view returns (\\n        IERC20 lpToken,\\n        uint256 lpSupply,\\n        uint256 allocPoint,\\n        uint256 lastRewardBlock,\\n        uint accAnnexPerShare,\\n        uint totalValidBoostNum,\\n        uint totalValidBoostCount,\\n        uint accBoostAnnexPerShare\\n    ) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 amount;\\n        if (annex == address(pool.lpToken)) {\\n            amount = lpSupplyOfAnnPool;\\n        } else {\\n            amount = pool.lpToken.balanceOf(address(this));\\n        }\\n        return (\\n            pool.lpToken,\\n            amount,\\n            pool.allocPoint,\\n            pool.lastRewardBlock,\\n            pool.accAnnexPerShare,\\n            pool.totalValidBoostNum,\\n            pool.totalValidBoostCount,\\n            pool.accBoostAnnexPerShare\\n        );\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock =\\n            block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accAnnexPerShare: 0,\\n                accBoostAnnexPerShare: 0,\\n                totalValidBoostNum: 0,\\n                totalValidBoostCount: 0\\n            })\\n        );\\n    }\\n\\n    // Update the given pool's ANN allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Update the given ANN per block. Can only be called by the owner.\\n    function setAnnexPerBlock(\\n        uint256 speed\\n    ) public onlyOwner {\\n        annexPerBlock = speed;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_to <= bonusEndBlock) {\\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n        } else if (_from >= bonusEndBlock) {\\n            return _to.sub(_from);\\n        } else {\\n            return\\n                bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\\n                    _to.sub(bonusEndBlock)\\n                );\\n        }\\n    }\\n\\n    function getValidBoostFactors(uint256 userBoostFactors) internal view returns (uint256) {\\n        uint256 validBoostFactors = userBoostFactors > minimumValidBoostCount ? userBoostFactors - minimumValidBoostCount : 0;\\n\\n        return validBoostFactors;\\n    }\\n\\n    // View function to see pending ANNs on frontend.\\n    function pendingAnnex(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accAnnexPerShare = pool.accAnnexPerShare;\\n        uint256 accBoostAnnexPerShare = pool.accBoostAnnexPerShare;\\n        uint256 lpSupply;\\n        if (annex == address(pool.lpToken)) {\\n            lpSupply = lpSupplyOfAnnPool;\\n        } else {\\n            lpSupply = pool.lpToken.balanceOf(address(this));\\n        }\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier =\\n                getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 annexReward =\\n                multiplier.mul(annexPerBlock).mul(pool.allocPoint).div(\\n                    totalAllocPoint\\n                );\\n            accAnnexPerShare = accAnnexPerShare.add(\\n                annexReward.mul(1e12).div(lpSupply)\\n            );\\n\\n            uint256 annexBoostReward =\\n                multiplier.mul(boostAnnexPerBlock).mul(pool.allocPoint).div(\\n                    totalAllocPoint\\n                );\\n            if (pool.totalValidBoostNum - minimumValidBoostCount * pool.totalValidBoostCount > 0) {\\n                accBoostAnnexPerShare = accBoostAnnexPerShare.add(\\n                    annexBoostReward.mul(1e12).div(pool.totalValidBoostNum - minimumValidBoostCount * pool.totalValidBoostCount)\\n                );\\n            }\\n        }\\n        uint256 reward = user.amount.mul(accAnnexPerShare).div(1e12).sub(user.rewardDebt);\\n        uint256 validBoostFactors = getValidBoostFactors(user.boostFactors.length);\\n        uint256 boostReward = validBoostFactors.mul(accBoostAnnexPerShare).div(1e12).sub(user.boostRewardDebt);\\n        uint256 totalReward = reward.add(boostReward);\\n        return totalReward;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply;\\n        if (annex == address(pool.lpToken)) {\\n            lpSupply = lpSupplyOfAnnPool;\\n        } else {\\n            lpSupply = pool.lpToken.balanceOf(address(this));\\n        }\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 annexReward =\\n            multiplier.mul(annexPerBlock).mul(pool.allocPoint).div(\\n                totalAllocPoint\\n            );\\n        safeAnnexTransfer(devaddr, annexReward.div(10));\\n        pool.accAnnexPerShare = pool.accAnnexPerShare.add(\\n            annexReward.mul(1e12).div(lpSupply)\\n        );\\n\\n        uint256 annexBoostReward =\\n            multiplier.mul(boostAnnexPerBlock).mul(pool.allocPoint).div(\\n                totalAllocPoint\\n            );\\n        if (pool.totalValidBoostNum - minimumValidBoostCount * pool.totalValidBoostCount > 0) {\\n            pool.accBoostAnnexPerShare = pool.accBoostAnnexPerShare.add(\\n                annexBoostReward.mul(1e12).div(pool.totalValidBoostNum - minimumValidBoostCount * pool.totalValidBoostCount)\\n            );\\n        }\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to Annexswap for ANN allocation.\\n    function deposit(uint256 _pid, uint256 _amount) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        uint256 validBoostFactors = getValidBoostFactors(user.boostFactors.length);\\n        if (user.amount > 0) {\\n            uint256 pending =\\n                user.amount.mul(pool.accAnnexPerShare).div(1e12).sub(\\n                    user.rewardDebt\\n                );\\n            uint256 boostPending = validBoostFactors.mul(pool.accBoostAnnexPerShare).div(1e12).sub(user.boostRewardDebt);\\n            safeAnnexTransfer(msg.sender, pending.add(boostPending));\\n        }\\n        pool.lpToken.safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            _amount\\n        );\\n        if (annex == address(pool.lpToken)) {\\n            lpSupplyOfAnnPool = lpSupplyOfAnnPool.add(_amount);\\n        }\\n        user.amount = user.amount.add(_amount);\\n        user.rewardDebt = user.amount.mul(pool.accAnnexPerShare).div(1e12);\\n        user.boostRewardDebt = validBoostFactors.mul(pool.accBoostAnnexPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from AnnexFarm.\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        uint256 validBoostFactors = getValidBoostFactors(user.boostFactors.length);\\n        uint256 pending =\\n            user.amount.mul(pool.accAnnexPerShare).div(1e12).sub(\\n                user.rewardDebt\\n            );\\n        uint256 boostPending = validBoostFactors.mul(pool.accBoostAnnexPerShare).div(1e12).sub(user.boostRewardDebt);\\n        safeAnnexTransfer(msg.sender, pending.add(boostPending));\\n        user.amount = user.amount.sub(_amount);\\n        user.rewardDebt = user.amount.mul(pool.accAnnexPerShare).div(1e12);\\n        user.boostRewardDebt = validBoostFactors.mul(pool.accBoostAnnexPerShare).div(1e12);\\n        if (annex == address(pool.lpToken)) {\\n            lpSupplyOfAnnPool = lpSupplyOfAnnPool.sub(_amount);\\n        }\\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n    }\\n\\n    // Safe annex transfer function, just in case if rounding error causes pool to not have enough ANNs.\\n    function safeAnnexTransfer(address _to, uint256 _amount) internal {\\n        uint256 annexAvailableBal = IERC20(annex).balanceOf(address(this));\\n        \\n        // Protect users liquidity\\n        if (annexAvailableBal > lpSupplyOfAnnPool) {\\n            annexAvailableBal = annexAvailableBal - lpSupplyOfAnnPool;\\n        } else {\\n            annexAvailableBal = 0;\\n        }\\n\\n        if (_amount > annexAvailableBal) {\\n            IERC20(annex).transfer(_to, annexAvailableBal);\\n        } else {\\n            IERC20(annex).transfer(_to, _amount);\\n        }\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function dev(address _devaddr) public {\\n        require(msg.sender == devaddr, \\\"dev: wut?\\\");\\n        devaddr = _devaddr;\\n    }\\n\\n    // Update reward token address by owner.\\n    function updateRewardToken(address _reward) public onlyOwner {\\n        annex = _reward;\\n    }\\n\\n    // NFT Boosting\\n\\n    // Update the given ANN per block. Can only be called by the owner.\\n    function setBoostAnnexPerBlock(\\n        uint256 speed\\n    ) public onlyOwner {\\n        boostAnnexPerBlock = speed;\\n    }\\n\\n    function _boost(uint256 _pid, uint _tokenId) internal {\\n        require (isBoosted[_tokenId] == false);\\n\\n        boostFactor.transferFrom(msg.sender, address(this), _tokenId);\\n        boostFactor.updateStakeTime(_tokenId, true);\\n\\n        isBoosted[_tokenId] = true;\\n\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint originBoostFactors = user.boostFactors.length;\\n        user.boostFactors.push(_tokenId);\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (user.boostFactors.length > minimumValidBoostCount && originBoostFactors <= minimumValidBoostCount) {\\n            pool.totalValidBoostCount++;\\n            pool.totalValidBoostNum = pool.totalValidBoostNum + user.boostFactors.length;\\n        } else if (originBoostFactors > minimumValidBoostCount) {\\n            pool.totalValidBoostNum++;\\n        }\\n\\n        emit Boost(msg.sender, _pid, _tokenId);\\n    }\\n\\n    function boost(uint256 _pid, uint _tokenId) external {\\n        _claimRewards(_pid, msg.sender);\\n        _boost(_pid, _tokenId);\\n        _updateUserDebt(_pid, msg.sender);\\n    }\\n\\n    function boostPartially(uint _pid, uint tokenAmount) external {\\n        _claimRewards(_pid, msg.sender);\\n        uint256 ownerTokenCount = boostFactor.balanceOf(msg.sender);\\n        require(tokenAmount <= ownerTokenCount);\\n\\n        do {\\n            tokenAmount--;\\n            uint _tokenId = boostFactor.tokenOfOwnerByIndex(msg.sender, tokenAmount);\\n\\n            _boost(_pid, _tokenId);\\n        } while (tokenAmount > 0);\\n        _updateUserDebt(_pid, msg.sender);\\n    }\\n\\n    function boostAll(uint _pid) external {\\n        _claimRewards(_pid, msg.sender);\\n        uint256 ownerTokenCount = boostFactor.balanceOf(msg.sender);\\n        require(ownerTokenCount > 0, \\\"\\\");\\n\\n        do {\\n            uint _tokenId = boostFactor.tokenOfOwnerByIndex(msg.sender, ownerTokenCount - 1);\\n\\n            _boost(_pid, _tokenId);\\n            ownerTokenCount = boostFactor.balanceOf(msg.sender);\\n        } while (ownerTokenCount > 0);\\n\\n        _updateUserDebt(_pid, msg.sender);\\n    }\\n\\n    function _unBoost(uint _pid, uint _tokenId) internal {\\n        require (isBoosted[_tokenId] == true);\\n\\n        boostFactor.transferFrom(address(this), msg.sender, _tokenId);\\n        boostFactor.updateStakeTime(_tokenId, false);\\n\\n        isBoosted[_tokenId] = false;\\n\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint length = user.boostFactors.length;\\n        if (length > minimumValidBoostCount && length - 1 <= minimumValidBoostCount) {\\n            pool.totalValidBoostCount--;\\n            pool.totalValidBoostNum = pool.totalValidBoostNum - length;\\n        } else if (length - 1 > minimumValidBoostCount) {\\n            pool.totalValidBoostNum--;\\n        }\\n\\n        emit UnBoost(msg.sender, _pid, _tokenId);\\n    }\\n\\n    function unBoostPartially(uint _pid, uint tokenAmount) external {\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.boostFactors.length > 0, \\\"\\\");\\n        require(tokenAmount <= user.boostFactors.length, \\\"\\\");\\n\\n        _claimRewards(_pid, msg.sender);\\n\\n        for (uint i; i < tokenAmount; i++) {\\n            uint index = user.boostFactors.length - 1;\\n            uint _tokenId = user.boostFactors[index];\\n\\n            _unBoost(_pid, _tokenId);\\n            user.boostFactors.pop();\\n        }\\n        _updateUserDebt(_pid, msg.sender);\\n    }\\n\\n    function unBoostAll(uint _pid) external {\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.boostFactors.length > 0, \\\"\\\");\\n\\n        _claimRewards(_pid, msg.sender);\\n\\n        do {\\n            uint index = user.boostFactors.length - 1;\\n            uint _tokenId = user.boostFactors[index];\\n\\n            _unBoost(_pid, _tokenId);\\n            user.boostFactors.pop();\\n        } while (user.boostFactors.length > 0);\\n        _updateUserDebt(_pid, msg.sender);\\n    }\\n\\n    function _claimRewards(uint256 _pid, address _user) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        require(user.amount > 0, \\\"No deposited lptokens\\\");\\n        updatePool(_pid);\\n        uint256 validBoostFactors = getValidBoostFactors(user.boostFactors.length);\\n\\n        uint256 pending =\\n            user.amount.mul(pool.accAnnexPerShare).div(1e12).sub(\\n                user.rewardDebt\\n            );\\n        uint256 boostPending = validBoostFactors.mul(pool.accBoostAnnexPerShare).div(1e12).sub(user.boostRewardDebt);\\n        safeAnnexTransfer(_user, pending.add(boostPending));\\n    }\\n\\n    function _updateUserDebt(uint256 _pid, address _user) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 validBoostFactors = getValidBoostFactors(user.boostFactors.length);\\n        user.rewardDebt = user.amount.mul(pool.accAnnexPerShare).div(1e12);\\n        user.boostRewardDebt = validBoostFactors.mul(pool.accBoostAnnexPerShare).div(1e12);\\n    }\\n\\n    function checkOriginOwner(uint _pid, address _user, uint _tokenId) internal view returns (bool) {\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        bool owner = false;\\n        for (uint i; i < user.boostFactors.length; i++) {\\n            if (_tokenId == user.boostFactors[i]) {\\n                owner = true;\\n                break;\\n            }\\n        }\\n\\n        return owner;\\n    }\\n\\n    // Update boostFactor address. Can only be called by the owner.\\n    function setBoostFactor(\\n        address _address\\n    ) external onlyOwner {\\n        boostFactor = IBoostToken(_address);\\n    }\\n\\n    // Update boostFactor address. Can only be called by the owner.\\n    function setMinimumValidBoostCount(uint16 _count) external onlyOwner {\\n        minimumValidBoostCount = _count;\\n    }\\n\\n    // Withdraw NFTs which transferred unexpectedly\\n    function emergencyNftWithdraw() external nonReentrant onlyOwner {\\n        uint256 ownerTokenCount = boostFactor.balanceOf(address(this));\\n\\n        for (uint256 i; i < ownerTokenCount; i++) {\\n            uint _tokenId = boostFactor.tokenOfOwnerByIndex(address(this), i);\\n\\n            boostFactor.safeTransferFrom(address(this), msg.sender, _tokenId);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x886834b22b4ef165e5025959a147fd32e2d037c249e51513a867c8604cbff071\",\"license\":\"MIT\"},\"contracts/interfaces/IBoostToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\ninterface IBoostToken is IERC721Enumerable {\\n    function updateStakeTime(uint tokenId, bool isStake) external;\\n\\n    function getTokenOwner(uint tokenId) external view returns(address);\\n}\",\"keccak256\":\"0x8a558ac3115c7bf7c67978d2c19b04b2d0b0552223cd4e860035f8e28de9ffb7\",\"license\":\"MIT\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0x7d0282e21e539ab0bd2f3428f602c61d933e0f834800630317cc5c36b5ea49a2\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x7521d73c0b2001a87ce17fdc3ff40191c0b7893b0c48a695011d615d8fda254f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\",\"keccak256\":\"0xe9c30033071912622c770430b5cbf53ed63b805af1cca2db3bfb146a8b9b48b7\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\",\"keccak256\":\"0x8a03f436d7ca9a16aab426e2840ac67aad29393a512e847b451925be16798de0\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n    external returns (bytes4);\\n}\",\"keccak256\":\"0x699408cf5e85fa14c6bf36a98b5a6ae31245cd96661ed306323386f8c5d65af1\",\"license\":\"MIT\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x8fd25b32a441a9b864b12653d468a8c4003266701c6f476af7d394de2b7c075c\",\"license\":\"MIT\"},\"contracts/libraries/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\",\"keccak256\":\"0x1492927e67a948a4ead8381ced75abddfcb81aad176b2b29ed96cb368defad7d\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n\\n// P1 - P3: OK\\npragma solidity 0.6.12;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\n// T1 - T4: OK\\ncontract OwnableData {\\n    // V1 - V5: OK\\n    address public owner;\\n    // V1 - V5: OK\\n    address public pendingOwner;\\n}\\n\\n// T1 - T4: OK\\ncontract Ownable is OwnableData {\\n    // E1: OK\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () internal {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    // F1 - F9: OK\\n    // C1 - C21: OK\\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    // F1 - F9: OK\\n    // C1 - C21: OK\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    // M1 - M5: OK\\n    // C1 - C21: OK\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x66e35e7c75bf8c2de21425d8562e9ce93c234982ffdf0339d08d1efe7d7684f1\",\"license\":\"MIT\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xdd3ee8073355d818e6ef017c727b17c3e1a5e03efb5ffa5a6fba3f133afceec6\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x3666829bd284cf94efb19f8fdec2a594eeaa7a91b08704aead32c3ad0d0e1f1c\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x2e1df665169560627c2a0dce65572e63de974bb41c759cdeed973cd570b4d7cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600b805461ffff191660031790556000600e5534801561002357600080fd5b50604051612f96380380612f96833981810160405260e081101561004657600080fd5b50805160208201516040808401516060850151608086015160a087015160c090970151600080546001600160a01b0319163390811782559551979896979496939592949192917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600255600380546001600160a01b039889166001600160a01b031991821617909155600b8054978916620100000262010000600160b01b03199098169790971790965560048054959097169490951693909317909455600655600a92909255600555600f55612e6f806101276000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c80636ff4f3f61161013b578063c1ddfb00116100b8578063e30c39781161007c578063e30c39781461065d578063e3443ce714610665578063ef35f00e14610691578063f6d4c185146106b2578063f8cf31cb146106d157610248565b8063c1ddfb00146105f0578063d49e77cd146105f8578063d94f11be14610600578063ddb2d8571461061d578063e2bbb1581461063a57610248565b80638da5cb5b116100ff5780638da5cb5b1461056b5780638dbb1e3a1461057357806393f1a40b14610596578063a22abfbf146105e0578063abee219a146105e857610248565b80636ff4f3f6146104ec5780637053c75c146104f457806378bd92e1146105205780638aa285501461053d5780638d88a90e1461054557610248565b80633e0bc9f4116101c95780634e71e0c81161018d5780634e71e0c81461047757806351eb05a61461047f5780635312ea8e1461049c578063630b5ba1146104b957806364482f79146104c157610248565b80633e0bc9f4146103e657806340be7bec14610403578063441a3e7014610426578063488a8f581461044957806348cd4cb11461046f57610248565b80631aed6553116102105780631aed6553146102ed5780631b64854c146102f55780631eaaa0451461031957806321ab46c81461034d5780632f380b351461037e57610248565b8063078dfbe71461024d578063081e3eda146102855780630fa6b3a01461029f57806311ea3264146102c257806317caf6f1146102e5575b600080fd5b6102836004803603606081101561026357600080fd5b506001600160a01b038135169060208101351515906040013515156106f7565b005b61028d610821565b60408051918252519081900360200190f35b610283600480360360408110156102b557600080fd5b5080359060200135610827565b610283600480360360408110156102d857600080fd5b5080359060200135610922565b61028d610a65565b61028d610a6b565b6102fd610a71565b604080516001600160a01b039092168252519081900360200190f35b6102836004803603606081101561032f57600080fd5b508035906001600160a01b0360208201351690604001351515610a80565b61036a6004803603602081101561036357600080fd5b5035610c7c565b604080519115158252519081900360200190f35b61039b6004803603602081101561039457600080fd5b5035610c91565b604080516001600160a01b0390991689526020890197909752878701959095526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b610283600480360360208110156103fc57600080fd5b5035610da3565b6102836004803603604081101561041957600080fd5b5080359060200135610df5565b6102836004803603604081101561043c57600080fd5b5080359060200135610e17565b6102836004803603602081101561045f57600080fd5b50356001600160a01b0316611063565b61028d6110da565b6102836110e0565b6102836004803603602081101561049557600080fd5b50356111a2565b610283600480360360208110156104b257600080fd5b5035611394565b610283611490565b610283600480360360608110156104d757600080fd5b508035906020810135906040013515156114af565b61028d611575565b61028d6004803603604081101561050a57600080fd5b50803590602001356001600160a01b031661157b565b6102836004803603602081101561053657600080fd5b50356117c7565b61028d61199d565b6102836004803603602081101561055b57600080fd5b50356001600160a01b03166119a2565b6102fd611a0f565b61028d6004803603604081101561058957600080fd5b5080359060200135611a1e565b6105c2600480360360408110156105ac57600080fd5b50803590602001356001600160a01b0316611a84565b60408051938452602084019290925282820152519081900360600190f35b61028d611ab0565b610283611ab6565b6102fd611cfb565b6102fd611d10565b6102836004803603602081101561061657600080fd5b5035611d1f565b6102836004803603602081101561063357600080fd5b5035611de0565b6102836004803603604081101561065057600080fd5b5080359060200135611e32565b6102fd611fc6565b61028d6004803603604081101561067b57600080fd5b506001600160a01b038135169060200135611fd5565b610283600480360360208110156106a757600080fd5b503561ffff16612003565b6106ba612068565b6040805161ffff9092168252519081900360200190f35b610283600480360360208110156106e757600080fd5b50356001600160a01b0316612072565b6000546001600160a01b03163314610744576040805162461bcd60e51b81526020600482018190526024820152600080516020612df0833981519152604482015290519081900360640190fd5b8115610800576001600160a01b03831615158061075e5750805b6107a7576040805162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b604482015290519081900360640190fd5b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b03851617905561081c565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b60075490565b600082815260096020908152604080832033845290915290206002810154610870576040805162461bcd60e51b8152602060048201526000602482015290519081900360640190fd5b60028101548211156108a3576040805162461bcd60e51b8152602060048201526000602482015290519081900360640190fd5b6108ad83336120e1565b60005b8281101561091757600282018054600019810191600091839081106108d157fe5b906000526020600020015490506108e886826121fb565b836002018054806108f557fe5b60008281526020812082016000199081019190915501905550506001016108b0565b5061081c83336123f2565b61092c82336120e1565b600b54604080516370a0823160e01b815233600482015290516000926201000090046001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d60208110156109a757600080fd5b50519050808211156109b857600080fd5b600b5460408051632f745c5960e01b815233600482015260001990940160248501819052905190936000926001600160a01b03620100009091041691632f745c5991604480820192602092909190829003018186803b158015610a1a57600080fd5b505afa158015610a2e573d6000803e3d6000fd5b505050506040513d6020811015610a4457600080fd5b50519050610a528482612498565b50600082116109b85761081c83336123f2565b600e5481565b60055481565b6003546001600160a01b031681565b6000546001600160a01b03163314610acd576040805162461bcd60e51b81526020600482018190526024820152600080516020612df0833981519152604482015290519081900360640190fd5b8015610adb57610adb611490565b6000600f544311610aee57600f54610af0565b435b600e54909150610b0090856126a4565b600e556040805160e0810182526001600160a01b039485168152602081019586529081019182526000606082018181526080830182815260a0840183815260c08501848152600780546001810182559581905295517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6889590960294850180546001600160a01b031916969099169590951790975596517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68983015592517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a82015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b83015593517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c82015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68d8301555090517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68e90910155565b600c6020526000908152604090205460ff1681565b600080600080600080600080600060078a81548110610cac57fe5b60009182526020822060079091020180546003549193506001600160a01b0391821691161415610cdf5750600854610d58565b8154604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610d2957600080fd5b505afa158015610d3d573d6000803e3d6000fd5b505050506040513d6020811015610d5357600080fd5b505190505b8154600183015460028401546003850154600486015460058701546006909701546001600160a01b039095169e50949c50919a50985096509094509092509050919395975091939597565b6000546001600160a01b03163314610df0576040805162461bcd60e51b81526020600482018190526024820152600080516020612df0833981519152604482015290519081900360640190fd5b600655565b610dff82336120e1565b610e098282612498565b610e1382336123f2565b5050565b600280541415610e6e576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60028081905550600060078381548110610e8457fe5b600091825260208083208684526009825260408085203386529092529220805460079092029092019250831115610ef7576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b610f00846111a2565b6002810154600090610f1190612705565b90506000610f4d8360010154610f4764e8d4a51000610f418860030154886000015461272c90919063ffffffff16565b90612785565b906127c7565b90506000610f798460030154610f4764e8d4a51000610f4189600601548861272c90919063ffffffff16565b9050610f8e33610f8984846126a4565b612809565b8354610f9a90876127c7565b8085556003860154610fb79164e8d4a5100091610f41919061272c565b60018501556006850154610fd79064e8d4a5100090610f4190869061272c565b600380860191909155855490546001600160a01b03908116911614156110085760085461100490876127c7565b6008555b845461101e906001600160a01b031633886129b2565b604080518781529051889133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505060016002555050505050565b6000546001600160a01b031633146110b0576040805162461bcd60e51b81526020600482018190526024820152600080516020612df0833981519152604482015290519081900360640190fd5b600b80546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b600f5481565b6001546001600160a01b0316338114611140576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b6000600782815481106111b157fe5b90600052602060002090600702019050806002015443116111d25750611391565b80546003546000916001600160a01b03918216911614156111f6575060085461126f565b8154604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561124057600080fd5b505afa158015611254573d6000803e3d6000fd5b505050506040513d602081101561126a57600080fd5b505190505b80611281575043600290910155611391565b6000611291836002015443611a1e565b905060006112be600e54610f4186600101546112b86006548761272c90919063ffffffff16565b9061272c565b6004549091506112dc906001600160a01b0316610f8983600a612785565b6112fd6112f284610f418464e8d4a5100061272c565b6003860154906126a4565b8460030181905550600061132a600e54610f4187600101546112b8600a548861272c90919063ffffffff16565b6005860154600b54600488015492935061ffff1602900315611382576005850154600b54600487015461137c926113719261ffff16029003610f418464e8d4a5100061272c565b6006870154906126a4565b60068601555b43856002018190555050505050505b50565b6002805414156113eb576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002808190555060006007828154811061140157fe5b60009182526020808320858452600982526040808520338087529352909320805460079093029093018054909450611446926001600160a01b039190911691906129b2565b80546040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a360008082556001918201556002555050565b60075460005b81811015610e13576114a7816111a2565b600101611496565b6000546001600160a01b031633146114fc576040805162461bcd60e51b81526020600482018190526024820152600080516020612df0833981519152604482015290519081900360640190fd5b801561150a5761150a611490565b611547826115416007868154811061151e57fe5b906000526020600020906007020160010154600e546127c790919063ffffffff16565b906126a4565b600e81905550816007848154811061155b57fe5b906000526020600020906007020160010181905550505050565b600a5481565b6000806007848154811061158b57fe5b600091825260208083208784526009825260408085206001600160a01b038981168752935284206007939093020160038181015460068301548354925493975094959094939092918116911614156115e6575060085461165f565b8454604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561163057600080fd5b505afa158015611644573d6000803e3d6000fd5b505050506040513d602081101561165a57600080fd5b505190505b84600201544311801561167157508015155b15611741576000611686866002015443611a1e565b905060006116ad600e54610f4189600101546112b86006548761272c90919063ffffffff16565b90506116cc6116c584610f418464e8d4a5100061272c565b86906126a4565b945060006116f3600e54610f418a600101546112b8600a548861272c90919063ffffffff16565b6005890154600b5460048b015492935061ffff160290031561173d576005880154600b5460048a015461173a926116c59261ffff16029003610f418464e8d4a5100061272c565b94505b5050505b600061176b8560010154610f4764e8d4a51000610f41888a6000015461272c90919063ffffffff16565b9050600061177f8660020180549050612705565b905060006117a78760030154610f4764e8d4a51000610f41898761272c90919063ffffffff16565b905060006117b584836126a4565b99505050505050505050505b92915050565b6117d181336120e1565b600b54604080516370a0823160e01b815233600482015290516000926201000090046001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561182257600080fd5b505afa158015611836573d6000803e3d6000fd5b505050506040513d602081101561184c57600080fd5b505190508061187c576040805162461bcd60e51b8152602060048201526000602482015290519081900360640190fd5b600b5460408051632f745c5960e01b81523360048201526000198401602482015290516000926201000090046001600160a01b031691632f745c59916044808301926020929190829003018186803b1580156118d757600080fd5b505afa1580156118eb573d6000803e3d6000fd5b505050506040513d602081101561190157600080fd5b5051905061190f8382612498565b600b54604080516370a0823160e01b81523360048201529051620100009092046001600160a01b0316916370a0823191602480820192602092909190829003018186803b15801561195f57600080fd5b505afa158015611973573d6000803e3d6000fd5b505050506040513d602081101561198957600080fd5b50519150508061187c57610e1382336123f2565b600a81565b6004546001600160a01b031633146119ed576040805162461bcd60e51b81526020600482015260096024820152686465763a207775743f60b81b604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031681565b60006005548211611a3f57611a38600a6112b884866127c7565b90506117c1565b6005548310611a5257611a3882846127c7565b611a38611a6a600554846127c790919063ffffffff16565b611541600a6112b8876005546127c790919063ffffffff16565b600960209081526000928352604080842090915290825290208054600182015460039092015490919083565b60065481565b600280541415611b0d576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600280556000546001600160a01b03163314611b5e576040805162461bcd60e51b81526020600482018190526024820152600080516020612df0833981519152604482015290519081900360640190fd5b600b54604080516370a0823160e01b815230600482015290516000926201000090046001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611baf57600080fd5b505afa158015611bc3573d6000803e3d6000fd5b505050506040513d6020811015611bd957600080fd5b5051905060005b81811015611cf257600b5460408051632f745c5960e01b81523060048201526024810184905290516000926201000090046001600160a01b031691632f745c59916044808301926020929190829003018186803b158015611c4057600080fd5b505afa158015611c54573d6000803e3d6000fd5b505050506040513d6020811015611c6a57600080fd5b5051600b5460408051632142170760e11b8152306004820152336024820152604481018490529051929350620100009091046001600160a01b0316916342842e0e9160648082019260009290919082900301818387803b158015611ccd57600080fd5b505af1158015611ce1573d6000803e3d6000fd5b505060019093019250611be0915050565b50506001600255565b600b546201000090046001600160a01b031681565b6004546001600160a01b031681565b600081815260096020908152604080832033845290915290206002810154611d68576040805162461bcd60e51b8152602060048201526000602482015290519081900360640190fd5b611d7282336120e1565b60028101805460001981019160009183908110611d8b57fe5b90600052602060002001549050611da284826121fb565b82600201805480611daf57fe5b6001900381819060005260206000200160009055905550506000816002018054905011611d7257610e1382336123f2565b6000546001600160a01b03163314611e2d576040805162461bcd60e51b81526020600482018190526024820152600080516020612df0833981519152604482015290519081900360640190fd5b600a55565b600060078381548110611e4157fe5b60009182526020808320868452600982526040808520338652909252922060079091029091019150611e72846111a2565b6002810154600090611e8390612705565b825490915015611efa576000611ebb8360010154610f4764e8d4a51000610f418860030154886000015461272c90919063ffffffff16565b90506000611ee78460030154610f4764e8d4a51000610f4189600601548861272c90919063ffffffff16565b9050611ef733610f8984846126a4565b50505b8254611f11906001600160a01b0316333087612a04565b82546003546001600160a01b0390811691161415611f3a57600854611f3690856126a4565b6008555b8154611f4690856126a4565b8083556003840154611f639164e8d4a5100091610f41919061272c565b60018301556006830154611f839064e8d4a5100090610f4190849061272c565b6003830155604080518581529051869133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b6001546001600160a01b031681565b600d6020528160005260406000208181548110611fee57fe5b90600052602060002001600091509150505481565b6000546001600160a01b03163314612050576040805162461bcd60e51b81526020600482018190526024820152600080516020612df0833981519152604482015290519081900360640190fd5b600b805461ffff191661ffff92909216919091179055565b600b5461ffff1681565b6000546001600160a01b031633146120bf576040805162461bcd60e51b81526020600482018190526024820152600080516020612df0833981519152604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000600783815481106120f057fe5b600091825260208083208684526009825260408085206001600160a01b0388168652909252922080546007909202909201925061216c576040805162461bcd60e51b81526020600482015260156024820152744e6f206465706f7369746564206c70746f6b656e7360581b604482015290519081900360640190fd5b612175846111a2565b600281015460009061218690612705565b905060006121b68360010154610f4764e8d4a51000610f418860030154886000015461272c90919063ffffffff16565b905060006121e28460030154610f4764e8d4a51000610f4189600601548861272c90919063ffffffff16565b90506121f286610f8984846126a4565b50505050505050565b6000818152600c602052604090205460ff16151560011461221b57600080fd5b600b54604080516323b872dd60e01b8152306004820152336024820152604481018490529051620100009092046001600160a01b0316916323b872dd9160648082019260009290919082900301818387803b15801561227957600080fd5b505af115801561228d573d6000803e3d6000fd5b5050600b5460408051630a7c981760e31b8152600481018690526000602482018190529151620100009093046001600160a01b031694506353e4c0b893506044808201939182900301818387803b1580156122e757600080fd5b505af11580156122fb573d6000803e3d6000fd5b5050506000828152600c60209081526040808320805460ff1916905585835260098252808320338452909152812060078054919350908590811061233b57fe5b600091825260209091206002840154600b54600790930290910192509061ffff16811180156123745750600b5461ffff16600019820111155b156123955760058201805460001901905560048201805482900390556123b4565b600b5461ffff16600019820111156123b4576004820180546000190190555b604080518581529051869133917fd9ccb4973c95d201bc1724ce7e7f19f8e0835e571f58bf8b6a0de82084f0574f9181900360200190a35050505050565b60006007838154811061240157fe5b600091825260208083208684526009825260408085206001600160a01b0388168652909252908320600281015460079093029091019350919061244390612705565b905061246964e8d4a51000610f418560030154856000015461272c90919063ffffffff16565b600183015560068301546124899064e8d4a5100090610f4190849061272c565b82600301819055505050505050565b6000818152600c602052604090205460ff16156124b457600080fd5b600b54604080516323b872dd60e01b8152336004820152306024820152604481018490529051620100009092046001600160a01b0316916323b872dd9160648082019260009290919082900301818387803b15801561251257600080fd5b505af1158015612526573d6000803e3d6000fd5b5050600b5460408051630a7c981760e31b815260048101869052600160248201529051620100009092046001600160a01b031693506353e4c0b8925060448082019260009290919082900301818387803b15801561258357600080fd5b505af1158015612597573d6000803e3d6000fd5b5050506000828152600c60209081526040808320805460ff1916600190811790915586845260098352818420338552835290832060028101805492830181558452918320810185905560078054929450909291869081106125f457fe5b60009182526020909120600b5460028601546007909302909101925061ffff161080156126275750600b5461ffff168211155b1561264c57600581018054600101905560028301546004820180549091019055612666565b600b5461ffff168211156126665760048101805460010190555b604080518581529051869133917faadc628cb4fd3bb7a62795eb460290459458bdc6f387ffde727c740f42c183379181900360200190a35050505050565b6000828201838110156126fe576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600b54600090819061ffff16831161271e5760006126fe565b5050600b5461ffff16900390565b60008261273b575060006117c1565b8282028284828161274857fe5b04146126fe5760405162461bcd60e51b8152600401808060200182810382526021815260200180612dcf6021913960400191505060405180910390fd5b60006126fe83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612a64565b60006126fe83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612b06565b600354604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561285457600080fd5b505afa158015612868573d6000803e3d6000fd5b505050506040513d602081101561287e57600080fd5b505160085490915081111561289757600854900361289b565b5060005b8082111561292b576003546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156128f957600080fd5b505af115801561290d573d6000803e3d6000fd5b505050506040513d602081101561292357600080fd5b5061081c9050565b6003546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561298157600080fd5b505af1158015612995573d6000803e3d6000fd5b505050506040513d60208110156129ab57600080fd5b5050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261081c908490612b60565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612a5e908590612b60565b50505050565b60008183612af05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612ab5578181015183820152602001612a9d565b50505050905090810190601f168015612ae25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581612afc57fe5b0495945050505050565b60008184841115612b585760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612ab5578181015183820152602001612a9d565b505050900390565b6060612bb5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612c119092919063ffffffff16565b80519091501561081c57808060200190516020811015612bd457600080fd5b505161081c5760405162461bcd60e51b815260040180806020018281038252602a815260200180612e10602a913960400191505060405180910390fd5b6060612c208484600085612c28565b949350505050565b6060612c3385612d95565b612c84576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612cc35780518252601f199092019160209182019101612ca4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612d25576040519150601f19603f3d011682016040523d82523d6000602084013e612d2a565b606091505b50915091508115612d3e579150612c209050565b805115612d4e5780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315612ab5578181015183820152602001612a9d565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590612c2057505015159291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212208fe006bb4f76303a35437207cec2d882d95c137ebd4fce442664ca34f1d5c43364736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2973,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2975,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3099,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 46,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "annex",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 48,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "devaddr",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 50,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "bonusEndBlock",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 52,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "annexPerBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 58,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "poolInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(PoolInfo)44_storage)dyn_storage"
      },
      {
        "astId": 60,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "lpSupplyOfAnnPool",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 66,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "userInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)29_storage))"
      },
      {
        "astId": 68,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "boostAnnexPerBlock",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 71,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "minimumValidBoostCount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint16"
      },
      {
        "astId": 73,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "boostFactor",
        "offset": 2,
        "slot": "11",
        "type": "t_contract(IBoostToken)2092"
      },
      {
        "astId": 77,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "isBoosted",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 82,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "boostFactors",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 85,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 87,
        "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
        "label": "startBlock",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)44_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)44_storage",
        "encoding": "dynamic_array",
        "label": "struct AnnexBoostFarm.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBoostToken)2092": {
        "encoding": "inplace",
        "label": "contract IBoostToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2182": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)29_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AnnexBoostFarm.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)29_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)29_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct AnnexBoostFarm.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)29_storage)"
      },
      "t_struct(PoolInfo)44_storage": {
        "encoding": "inplace",
        "label": "struct AnnexBoostFarm.PoolInfo",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)2182"
          },
          {
            "astId": 33,
            "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 35,
            "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 37,
            "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
            "label": "accAnnexPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 39,
            "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
            "label": "totalValidBoostNum",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 41,
            "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
            "label": "totalValidBoostCount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 43,
            "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
            "label": "accBoostAnnexPerShare",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(UserInfo)29_storage": {
        "encoding": "inplace",
        "label": "struct AnnexBoostFarm.UserInfo",
        "members": [
          {
            "astId": 21,
            "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23,
            "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 26,
            "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
            "label": "boostFactors",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 28,
            "contract": "contracts/AnnexBoostFarm.sol:AnnexBoostFarm",
            "label": "boostRewardDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}